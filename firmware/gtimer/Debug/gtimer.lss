
gtimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000576  00800100  00001c92  00001d26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800676  00800676  0000229c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00002338  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031fe  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000130e  00000000  00000000  000057e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b1c  00000000  00000000  00006af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008f0  00000000  00000000  00008610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f73  00000000  00000000  00008f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020e1  00000000  00000000  00009e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000bf54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__ctors_end>
       4:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
       8:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
       c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      10:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      14:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      18:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      1c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      20:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      24:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      28:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      2c:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_11>
      30:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      34:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      38:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      3c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      40:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      44:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      48:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_18>
      4c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_19>
      50:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      54:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      58:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      5c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      60:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      64:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      68:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      6c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      70:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      74:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      78:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      7c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      80:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      84:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      88:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      8c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      90:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      94:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      98:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      9c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      a0:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      a4:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      a8:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      ac:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      b0:	0c 94 c2 00 	jmp	0x184	; 0x184 <__bad_interrupt>
      b4:	cc 07       	cpc	r28, r28
      b6:	ea 07       	cpc	r30, r26
      b8:	07 08       	sbc	r0, r7
      ba:	07 08       	sbc	r0, r7
      bc:	07 08       	sbc	r0, r7
      be:	07 08       	sbc	r0, r7
      c0:	07 08       	sbc	r0, r7
      c2:	07 08       	sbc	r0, r7
      c4:	07 08       	sbc	r0, r7
      c6:	07 08       	sbc	r0, r7
      c8:	07 08       	sbc	r0, r7
      ca:	07 08       	sbc	r0, r7
      cc:	07 08       	sbc	r0, r7
      ce:	07 08       	sbc	r0, r7
      d0:	07 08       	sbc	r0, r7
      d2:	a9 06       	cpc	r10, r25
      d4:	07 08       	sbc	r0, r7
      d6:	14 07       	cpc	r17, r20
      d8:	07 08       	sbc	r0, r7
      da:	32 07       	cpc	r19, r18
      dc:	07 08       	sbc	r0, r7
      de:	4f 07       	cpc	r20, r31
      e0:	52 07       	cpc	r21, r18
      e2:	07 08       	sbc	r0, r7
      e4:	56 07       	cpc	r21, r22
      e6:	07 08       	sbc	r0, r7
      e8:	07 08       	sbc	r0, r7
      ea:	07 08       	sbc	r0, r7
      ec:	07 08       	sbc	r0, r7
      ee:	59 07       	cpc	r21, r25
      f0:	5d 07       	cpc	r21, r29
      f2:	07 08       	sbc	r0, r7
      f4:	07 08       	sbc	r0, r7
      f6:	07 08       	sbc	r0, r7
      f8:	60 07       	cpc	r22, r16
      fa:	64 07       	cpc	r22, r20
      fc:	83 07       	cpc	r24, r19
      fe:	07 08       	sbc	r0, r7
     100:	07 08       	sbc	r0, r7
     102:	aa 07       	cpc	r26, r26
     104:	07 08       	sbc	r0, r7
     106:	07 08       	sbc	r0, r7
     108:	ad 07       	cpc	r26, r29
     10a:	07 08       	sbc	r0, r7
     10c:	07 08       	sbc	r0, r7
     10e:	07 08       	sbc	r0, r7
     110:	07 08       	sbc	r0, r7
     112:	07 08       	sbc	r0, r7
     114:	07 08       	sbc	r0, r7
     116:	14 07       	cpc	r17, r20
     118:	07 08       	sbc	r0, r7
     11a:	32 07       	cpc	r19, r18
     11c:	07 08       	sbc	r0, r7
     11e:	4f 07       	cpc	r20, r31
     120:	52 07       	cpc	r21, r18
     122:	07 08       	sbc	r0, r7
     124:	56 07       	cpc	r21, r22
     126:	07 08       	sbc	r0, r7
     128:	07 08       	sbc	r0, r7
     12a:	07 08       	sbc	r0, r7
     12c:	07 08       	sbc	r0, r7
     12e:	59 07       	cpc	r21, r25
     130:	5d 07       	cpc	r21, r29
     132:	07 08       	sbc	r0, r7
     134:	07 08       	sbc	r0, r7
     136:	07 08       	sbc	r0, r7
     138:	60 07       	cpc	r22, r16
     13a:	64 07       	cpc	r22, r20
     13c:	83 07       	cpc	r24, r19
     13e:	07 08       	sbc	r0, r7
     140:	07 08       	sbc	r0, r7
     142:	aa 07       	cpc	r26, r26
     144:	07 08       	sbc	r0, r7
     146:	07 08       	sbc	r0, r7
     148:	ad 07       	cpc	r26, r29

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	d8 e0       	ldi	r29, 0x08	; 8
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
     156:	16 e0       	ldi	r17, 0x06	; 6
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	e2 e9       	ldi	r30, 0x92	; 146
     15e:	fc e1       	ldi	r31, 0x1C	; 28
     160:	02 c0       	rjmp	.+4      	; 0x166 <__do_copy_data+0x10>
     162:	05 90       	lpm	r0, Z+
     164:	0d 92       	st	X+, r0
     166:	a6 37       	cpi	r26, 0x76	; 118
     168:	b1 07       	cpc	r27, r17
     16a:	d9 f7       	brne	.-10     	; 0x162 <__do_copy_data+0xc>

0000016c <__do_clear_bss>:
     16c:	26 e0       	ldi	r18, 0x06	; 6
     16e:	a6 e7       	ldi	r26, 0x76	; 118
     170:	b6 e0       	ldi	r27, 0x06	; 6
     172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
     174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
     176:	a0 3a       	cpi	r26, 0xA0	; 160
     178:	b2 07       	cpc	r27, r18
     17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>
     17c:	0e 94 0c 08 	call	0x1018	; 0x1018 <main>
     180:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <_exit>

00000184 <__bad_interrupt>:
     184:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000188 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     188:	0e 94 ee 00 	call	0x1dc	; 0x1dc <system_init>
     18c:	08 95       	ret

0000018e <I2C_0_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
     18e:	87 b1       	in	r24, 0x07	; 7
     190:	80 62       	ori	r24, 0x20	; 32
     192:	87 b9       	out	0x07, r24	; 7
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
     194:	88 b1       	in	r24, 0x08	; 8
     196:	8f 7d       	andi	r24, 0xDF	; 223
     198:	88 b9       	out	0x08, r24	; 8
		DDRC &= ~(1 << pin);

		PORTC |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTC &= ~(1 << pin);
     19a:	88 b1       	in	r24, 0x08	; 8
     19c:	8f 7d       	andi	r24, 0xDF	; 223
     19e:	88 b9       	out	0x08, r24	; 8
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
     1a0:	87 b1       	in	r24, 0x07	; 7
     1a2:	80 61       	ori	r24, 0x10	; 16
     1a4:	87 b9       	out	0x07, r24	; 7
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
     1a6:	88 b1       	in	r24, 0x08	; 8
     1a8:	8f 7e       	andi	r24, 0xEF	; 239
     1aa:	88 b9       	out	0x08, r24	; 8
		DDRC &= ~(1 << pin);

		PORTC |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTC &= ~(1 << pin);
     1ac:	88 b1       	in	r24, 0x08	; 8
     1ae:	8f 7e       	andi	r24, 0xEF	; 239
     1b0:	88 b9       	out	0x08, r24	; 8
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	I2C_0_init();
     1b2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <I2C_0_init>
     1b6:	08 95       	ret

000001b8 <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     1b8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TIMER_0_init>
     1bc:	08 95       	ret

000001be <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     1be:	8a b1       	in	r24, 0x0a	; 10
     1c0:	8e 7f       	andi	r24, 0xFE	; 254
     1c2:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     1c4:	8b b1       	in	r24, 0x0b	; 11
     1c6:	8e 7f       	andi	r24, 0xFE	; 254
     1c8:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     1ca:	8a b1       	in	r24, 0x0a	; 10
     1cc:	82 60       	ori	r24, 0x02	; 2
     1ce:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
     1d0:	8b b1       	in	r24, 0x0b	; 11
     1d2:	8d 7f       	andi	r24, 0xFD	; 253
     1d4:	8b b9       	out	0x0b, r24	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     1d6:	0e 94 4b 02 	call	0x496	; 0x496 <USART_0_init>
     1da:	08 95       	ret

000001dc <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
     1dc:	8d e3       	ldi	r24, 0x3D	; 61
     1de:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
     1e2:	8f ef       	ldi	r24, 0xFF	; 255
     1e4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
     1e8:	94 b1       	in	r25, 0x04	; 4
     1ea:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
     1ec:	95 b1       	in	r25, 0x05	; 5
     1ee:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
     1f0:	97 b1       	in	r25, 0x07	; 7
     1f2:	90 78       	andi	r25, 0x80	; 128
     1f4:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
     1f6:	98 b1       	in	r25, 0x08	; 8
     1f8:	9f 67       	ori	r25, 0x7F	; 127
     1fa:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
     1fc:	9a b1       	in	r25, 0x0a	; 10
     1fe:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
     200:	9b b1       	in	r25, 0x0b	; 11
     202:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
     204:	8d b1       	in	r24, 0x0d	; 13
     206:	80 7f       	andi	r24, 0xF0	; 240
     208:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
     20a:	8e b1       	in	r24, 0x0e	; 14
     20c:	8f 60       	ori	r24, 0x0F	; 15
     20e:	8e b9       	out	0x0e, r24	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
     210:	84 b1       	in	r24, 0x04	; 4
     212:	81 60       	ori	r24, 0x01	; 1
     214:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
     216:	85 b1       	in	r24, 0x05	; 5
     218:	8e 7f       	andi	r24, 0xFE	; 254
     21a:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
     21c:	87 b1       	in	r24, 0x07	; 7
     21e:	8e 7f       	andi	r24, 0xFE	; 254
     220:	87 b9       	out	0x07, r24	; 7
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRC &= ~(1 << pin);
     222:	87 b1       	in	r24, 0x07	; 7
     224:	8e 7f       	andi	r24, 0xFE	; 254
     226:	87 b9       	out	0x07, r24	; 7

		PORTC |= 1 << pin;
     228:	88 b1       	in	r24, 0x08	; 8
     22a:	81 60       	ori	r24, 0x01	; 1
     22c:	88 b9       	out	0x08, r24	; 8
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
     22e:	87 b1       	in	r24, 0x07	; 7
     230:	82 60       	ori	r24, 0x02	; 2
     232:	87 b9       	out	0x07, r24	; 7
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
     234:	88 b1       	in	r24, 0x08	; 8
     236:	8d 7f       	andi	r24, 0xFD	; 253
     238:	88 b9       	out	0x08, r24	; 8
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
     23a:	87 b1       	in	r24, 0x07	; 7
     23c:	8b 7f       	andi	r24, 0xFB	; 251
     23e:	87 b9       	out	0x07, r24	; 7
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRC &= ~(1 << pin);
     240:	87 b1       	in	r24, 0x07	; 7
     242:	8b 7f       	andi	r24, 0xFB	; 251
     244:	87 b9       	out	0x07, r24	; 7

		PORTC |= 1 << pin;
     246:	88 b1       	in	r24, 0x08	; 8
     248:	84 60       	ori	r24, 0x04	; 4
     24a:	88 b9       	out	0x08, r24	; 8
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
     24c:	87 b1       	in	r24, 0x07	; 7
     24e:	88 60       	ori	r24, 0x08	; 8
     250:	87 b9       	out	0x07, r24	; 7
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
     252:	88 b1       	in	r24, 0x08	; 8
     254:	87 7f       	andi	r24, 0xF7	; 247
     256:	88 b9       	out	0x08, r24	; 8
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	60 e8       	ldi	r22, 0x80	; 128
     25c:	81 e6       	ldi	r24, 0x61	; 97
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
     264:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
     266:	15 be       	out	0x35, r1	; 53
	    // <true"> High
	    false);

	sysctrl_init();

	FLASH_0_init();
     268:	0e 94 3d 01 	call	0x27a	; 0x27a <FLASH_0_init>

	I2C_0_initialization();
     26c:	0e 94 c7 00 	call	0x18e	; 0x18e <I2C_0_initialization>

	TIMER_0_initialization();
     270:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TIMER_0_initialization>

	USART_0_initialization();
     274:	0e 94 df 00 	call	0x1be	; 0x1be <USART_0_initialization>
     278:	08 95       	ret

0000027a <FLASH_0_init>:
	//		 | 0 << SIGRD /* Signature Row Read: disabled */
	//		 | 0 << RWWSB /* Read-While-Write Busy: disabled */
	//		 | 0 << SPMIE; /* SPM Interrupt Enable: disabled */

	return 0;
}
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	08 95       	ret

0000027e <FLASH_0_read_eeprom_byte>:
 */
uint8_t FLASH_0_read_eeprom_byte(eeprom_adr_t eeprom_adr)
{

	// Wait until any EEPROM write has completed
	while (EECR & (1 << EEPROM_WRITE_ENABLE))
     27e:	f9 99       	sbic	0x1f, 1	; 31
     280:	fe cf       	rjmp	.-4      	; 0x27e <FLASH_0_read_eeprom_byte>
		;

	/* Set up address register */
	EEAR = eeprom_adr;
     282:	92 bd       	out	0x22, r25	; 34
     284:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1 << EERE);
     286:	8f b3       	in	r24, 0x1f	; 31
     288:	81 60       	ori	r24, 0x01	; 1
     28a:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	return EEDR;
     28c:	80 b5       	in	r24, 0x20	; 32
}
     28e:	08 95       	ret

00000290 <FLASH_0_write_eeprom_byte>:
 */
nvmctrl_status_t FLASH_0_write_eeprom_byte(eeprom_adr_t eeprom_adr, uint8_t data)
{

	/* Wait for completion of previous write */
	while (EECR & (1 << EEPROM_WRITE_ENABLE))
     290:	f9 99       	sbic	0x1f, 1	; 31
     292:	fe cf       	rjmp	.-4      	; 0x290 <FLASH_0_write_eeprom_byte>
		;
	/* Set up address and Data Registers */
	EEAR = eeprom_adr;
     294:	92 bd       	out	0x22, r25	; 34
     296:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
     298:	60 bd       	out	0x20, r22	; 32
	ENTER_CRITICAL(WRITE_BYTE);
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	0f 92       	push	r0
	/* Write logical one to EEMPE/EEWPE */
	EECR |= (1 << EEPROM_Master_WRITE_ENABLE);
     2a0:	8f b3       	in	r24, 0x1f	; 31
     2a2:	84 60       	ori	r24, 0x04	; 4
     2a4:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE/EEWE */
	EECR |= (1 << EEPROM_WRITE_ENABLE);
     2a6:	8f b3       	in	r24, 0x1f	; 31
     2a8:	82 60       	ori	r24, 0x02	; 2
     2aa:	8f bb       	out	0x1f, r24	; 31
	EXIT_CRITICAL(WRITE_BYTE);
     2ac:	0f 90       	pop	r0
     2ae:	0f be       	out	0x3f, r0	; 63

	return NVM_OK;
}
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	08 95       	ret

000002b4 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     2b4:	2f b7       	in	r18, 0x3f	; 63
	cli
     2b6:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     2b8:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     2ba:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     2bc:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     2be:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     2c0:	08 95       	ret

000002c2 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
     2c2:	e4 e6       	ldi	r30, 0x64	; 100
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	87 7f       	andi	r24, 0xF7	; 247
     2ca:	80 83       	st	Z, r24

	// TCCR1A = (0 << COM1A1) | (0 << COM1A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM1B1) | (0 << COM1B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM11) | (0 << WGM10); /* TC16 Mode 4 CTC */

	TCCR1B = (0 << WGM13) | (1 << WGM12)                /* TC16 Mode 4 CTC */
     2cc:	8d e0       	ldi	r24, 0x0D	; 13
     2ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	         | 0 << ICES1                               /* Input Capture Edge Select: disabled */
	         | (1 << CS12) | (0 << CS11) | (1 << CS10); /* IO clock divided by 1024 */

	// ICR1 = 0x0; /* Input capture value, used as top counter value in some modes: 0x0 */

	OCR1A = 0x1e32; /* Output compare A: 0x1e32 */
     2d2:	82 e3       	ldi	r24, 0x32	; 50
     2d4:	9e e1       	ldi	r25, 0x1E	; 30
     2d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     2da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */

	TIMSK1 = 0 << OCIE1B   /* Output Compare B Match Interrupt Enable: disabled */
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	         | 1 << OCIE1A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE1  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	08 95       	ret

000002e8 <I2C_0_init>:
 */
int8_t I2C_0_init()
{

	/* Enable TWI0 */
	PRR0 &= ~(1 << PRTWI0);
     2e8:	e4 e6       	ldi	r30, 0x64	; 100
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	8f 77       	andi	r24, 0x7F	; 127
     2f0:	80 83       	st	Z, r24

	/* SCL bitrate = F_CPU / (16 + 2 * TWBR0 * TWPS value) */
	/* Configured bit rate is 100.000kHz, based on CPU frequency 8.000MHz */
	TWBR0 = 0x20;          /* SCL bit rate: 100.000kHZ before prescaling */
     2f2:	80 e2       	ldi	r24, 0x20	; 32
     2f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR0 = 0x00 << TWPS0; /* SCL precaler: 1, effective bitrate = 100.000kHz */
     2f8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

	return 0;
}
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret

00000300 <USART_0_default_rx_isr_cb>:
}

bool USART_0_is_tx_busy()
{
	return (!(UCSR0A & (1 << TXC0)));
}
     300:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     304:	e0 91 83 06 	lds	r30, 0x0683	; 0x800683 <USART_0_rx_head>
     308:	ef 5f       	subi	r30, 0xFF	; 255
     30a:	e7 70       	andi	r30, 0x07	; 7
     30c:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <USART_0_rx_tail>
     310:	e8 17       	cp	r30, r24
     312:	59 f0       	breq	.+22     	; 0x32a <USART_0_default_rx_isr_cb+0x2a>
     314:	e0 93 83 06 	sts	0x0683, r30	; 0x800683 <USART_0_rx_head>
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	ec 57       	subi	r30, 0x7C	; 124
     31c:	f9 4f       	sbci	r31, 0xF9	; 249
     31e:	90 83       	st	Z, r25
     320:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <USART_0_rx_elements>
     324:	8f 5f       	subi	r24, 0xFF	; 255
     326:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <USART_0_rx_elements>
     32a:	08 95       	ret

0000032c <USART_0_default_udre_isr_cb>:
     32c:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <__data_end>
     330:	88 23       	and	r24, r24
     332:	89 f0       	breq	.+34     	; 0x356 <USART_0_default_udre_isr_cb+0x2a>
     334:	e0 91 77 06 	lds	r30, 0x0677	; 0x800677 <USART_0_tx_tail>
     338:	ef 5f       	subi	r30, 0xFF	; 255
     33a:	e7 70       	andi	r30, 0x07	; 7
     33c:	e0 93 77 06 	sts	0x0677, r30	; 0x800677 <USART_0_tx_tail>
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	e7 58       	subi	r30, 0x87	; 135
     344:	f9 4f       	sbci	r31, 0xF9	; 249
     346:	80 81       	ld	r24, Z
     348:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     34c:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <__data_end>
     350:	81 50       	subi	r24, 0x01	; 1
     352:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <__data_end>
     356:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <__data_end>
     35a:	81 11       	cpse	r24, r1
     35c:	05 c0       	rjmp	.+10     	; 0x368 <USART_0_default_udre_isr_cb+0x3c>
     35e:	e1 ec       	ldi	r30, 0xC1	; 193
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	8f 7d       	andi	r24, 0xDF	; 223
     366:	80 83       	st	Z, r24
     368:	08 95       	ret

0000036a <__vector_18>:
     36a:	1f 92       	push	r1
     36c:	0f 92       	push	r0
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	0f 92       	push	r0
     372:	11 24       	eor	r1, r1
     374:	2f 93       	push	r18
     376:	3f 93       	push	r19
     378:	4f 93       	push	r20
     37a:	5f 93       	push	r21
     37c:	6f 93       	push	r22
     37e:	7f 93       	push	r23
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
     384:	af 93       	push	r26
     386:	bf 93       	push	r27
     388:	ef 93       	push	r30
     38a:	ff 93       	push	r31
     38c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <USART_0_rx_isr_cb>
     390:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <USART_0_rx_isr_cb+0x1>
     394:	30 97       	sbiw	r30, 0x00	; 0
     396:	09 f0       	breq	.+2      	; 0x39a <__vector_18+0x30>
     398:	09 95       	icall
     39a:	ff 91       	pop	r31
     39c:	ef 91       	pop	r30
     39e:	bf 91       	pop	r27
     3a0:	af 91       	pop	r26
     3a2:	9f 91       	pop	r25
     3a4:	8f 91       	pop	r24
     3a6:	7f 91       	pop	r23
     3a8:	6f 91       	pop	r22
     3aa:	5f 91       	pop	r21
     3ac:	4f 91       	pop	r20
     3ae:	3f 91       	pop	r19
     3b0:	2f 91       	pop	r18
     3b2:	0f 90       	pop	r0
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	0f 90       	pop	r0
     3b8:	1f 90       	pop	r1
     3ba:	18 95       	reti

000003bc <__vector_19>:
     3bc:	1f 92       	push	r1
     3be:	0f 92       	push	r0
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	0f 92       	push	r0
     3c4:	11 24       	eor	r1, r1
     3c6:	2f 93       	push	r18
     3c8:	3f 93       	push	r19
     3ca:	4f 93       	push	r20
     3cc:	5f 93       	push	r21
     3ce:	6f 93       	push	r22
     3d0:	7f 93       	push	r23
     3d2:	8f 93       	push	r24
     3d4:	9f 93       	push	r25
     3d6:	af 93       	push	r26
     3d8:	bf 93       	push	r27
     3da:	ef 93       	push	r30
     3dc:	ff 93       	push	r31
     3de:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3e2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3e6:	30 97       	sbiw	r30, 0x00	; 0
     3e8:	09 f0       	breq	.+2      	; 0x3ec <__vector_19+0x30>
     3ea:	09 95       	icall
     3ec:	ff 91       	pop	r31
     3ee:	ef 91       	pop	r30
     3f0:	bf 91       	pop	r27
     3f2:	af 91       	pop	r26
     3f4:	9f 91       	pop	r25
     3f6:	8f 91       	pop	r24
     3f8:	7f 91       	pop	r23
     3fa:	6f 91       	pop	r22
     3fc:	5f 91       	pop	r21
     3fe:	4f 91       	pop	r20
     400:	3f 91       	pop	r19
     402:	2f 91       	pop	r18
     404:	0f 90       	pop	r0
     406:	0f be       	out	0x3f, r0	; 63
     408:	0f 90       	pop	r0
     40a:	1f 90       	pop	r1
     40c:	18 95       	reti

0000040e <USART_0_is_rx_ready>:
     40e:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <USART_0_rx_elements>
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	91 11       	cpse	r25, r1
     416:	01 c0       	rjmp	.+2      	; 0x41a <USART_0_is_rx_ready+0xc>
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	08 95       	ret

0000041c <USART_0_read>:
uint8_t USART_0_read(void)
{
	uint8_t tmptail;

	/* Wait for incoming data */
	while (USART_0_rx_elements == 0)
     41c:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <USART_0_rx_elements>
     420:	88 23       	and	r24, r24
     422:	e1 f3       	breq	.-8      	; 0x41c <USART_0_read>
		;
	/* Calculate buffer index */
	tmptail = (USART_0_rx_tail + 1) & USART_0_RX_BUFFER_MASK;
     424:	e0 91 82 06 	lds	r30, 0x0682	; 0x800682 <USART_0_rx_tail>
     428:	ef 5f       	subi	r30, 0xFF	; 255
     42a:	e7 70       	andi	r30, 0x07	; 7
	/* Store new index */
	USART_0_rx_tail = tmptail;
     42c:	e0 93 82 06 	sts	0x0682, r30	; 0x800682 <USART_0_rx_tail>
	ENTER_CRITICAL(R);
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	0f 92       	push	r0
	USART_0_rx_elements--;
     436:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <USART_0_rx_elements>
     43a:	81 50       	subi	r24, 0x01	; 1
     43c:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <USART_0_rx_elements>
	EXIT_CRITICAL(R);
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63

	/* Return data */
	return USART_0_rxbuf[tmptail];
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	ec 57       	subi	r30, 0x7C	; 124
     448:	f9 4f       	sbci	r31, 0xF9	; 249
}
     44a:	80 81       	ld	r24, Z
     44c:	08 95       	ret

0000044e <USART_0_write>:
void USART_0_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_0_tx_head + 1) & USART_0_TX_BUFFER_MASK;
     44e:	20 91 78 06 	lds	r18, 0x0678	; 0x800678 <USART_0_tx_head>
     452:	2f 5f       	subi	r18, 0xFF	; 255
     454:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (USART_0_tx_elements == USART_0_TX_BUFFER_SIZE)
     456:	90 91 76 06 	lds	r25, 0x0676	; 0x800676 <__data_end>
     45a:	98 30       	cpi	r25, 0x08	; 8
     45c:	e1 f3       	breq	.-8      	; 0x456 <USART_0_write+0x8>
		;
	/* Store data in buffer */
	USART_0_txbuf[tmphead] = data;
     45e:	e2 2f       	mov	r30, r18
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	e7 58       	subi	r30, 0x87	; 135
     464:	f9 4f       	sbci	r31, 0xF9	; 249
     466:	80 83       	st	Z, r24
	/* Store new index */
	USART_0_tx_head = tmphead;
     468:	20 93 78 06 	sts	0x0678, r18	; 0x800678 <USART_0_tx_head>
	ENTER_CRITICAL(W);
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	0f 92       	push	r0
	USART_0_tx_elements++;
     472:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <__data_end>
     476:	8f 5f       	subi	r24, 0xFF	; 255
     478:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <__data_end>
	EXIT_CRITICAL(W);
     47c:	0f 90       	pop	r0
     47e:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR0B |= (1 << UDRIE0);
     480:	e1 ec       	ldi	r30, 0xC1	; 193
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	80 62       	ori	r24, 0x20	; 32
     488:	80 83       	st	Z, r24
     48a:	08 95       	ret

0000048c <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
     48c:	0e 94 27 02 	call	0x44e	; 0x44e <USART_0_write>
	return 0;
}
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	08 95       	ret

00000496 <USART_0_init>:
{

	// Module is in UART mode

	/* Enable USART0 */
	PRR0 &= ~(1 << PRUSART0);
     496:	e4 e6       	ldi	r30, 0x64	; 100
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	8d 7f       	andi	r24, 0xFD	; 253
     49e:	80 83       	st	Z, r24

#define BAUD 9600

#include <utils/setbaud.h>

	UBRR0H = UBRRH_VALUE;
     4a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = UBRRL_VALUE;
     4a4:	83 e3       	ldi	r24, 0x33	; 51
     4a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0A = USE_2X << U2X0 /*  */
     4aa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	         | 0 << MPCM0;  /* Multi-processor Communication Mode: disabled */

	UCSR0B = 1 << RXCIE0    /* RX Complete Interrupt Enable: enabled */
     4ae:	88 e9       	ldi	r24, 0x98	; 152
     4b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	uint8_t x;

	/* Initialize ringbuffers */
	x = 0;

	USART_0_rx_tail     = x;
     4b4:	10 92 82 06 	sts	0x0682, r1	; 0x800682 <USART_0_rx_tail>
	USART_0_rx_head     = x;
     4b8:	10 92 83 06 	sts	0x0683, r1	; 0x800683 <USART_0_rx_head>
	USART_0_rx_elements = x;
     4bc:	10 92 81 06 	sts	0x0681, r1	; 0x800681 <USART_0_rx_elements>
	USART_0_tx_tail     = x;
     4c0:	10 92 77 06 	sts	0x0677, r1	; 0x800677 <USART_0_tx_tail>
	USART_0_tx_head     = x;
     4c4:	10 92 78 06 	sts	0x0678, r1	; 0x800678 <USART_0_tx_head>
	USART_0_tx_elements = x;
     4c8:	10 92 76 06 	sts	0x0676, r1	; 0x800676 <__data_end>

#if defined(__GNUC__)
	stdout = &USART_0_stream;
     4cc:	84 e0       	ldi	r24, 0x04	; 4
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <__iob+0x3>
     4d4:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <__iob+0x2>
#endif

	return 0;
}
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	08 95       	ret

000004dc <TWIStart>:

#include <atmel_start.h>
#include "twihelper.h"

void TWIStart(void) {
	TWCR0 = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     4dc:	84 ea       	ldi	r24, 0xA4	; 164
     4de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR0 & (1<<TWINT)) == 0);
     4e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4e6:	88 23       	and	r24, r24
     4e8:	e4 f7       	brge	.-8      	; 0x4e2 <TWIStart+0x6>
}
     4ea:	08 95       	ret

000004ec <TWIStop>:

void TWIStop(void) {
	TWCR0 = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4ec:	84 e9       	ldi	r24, 0x94	; 148
     4ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4f2:	08 95       	ret

000004f4 <TWIWrite>:
}

void TWIWrite(uint8_t data) {
	TWDR0 = data;
     4f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN);
     4f8:	84 e8       	ldi	r24, 0x84	; 132
     4fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR0 & (1<<TWINT)) == 0);
     4fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     502:	88 23       	and	r24, r24
     504:	e4 f7       	brge	.-8      	; 0x4fe <TWIWrite+0xa>
}
     506:	08 95       	ret

00000508 <TWIReadACK>:

uint8_t TWIReadACK(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     508:	84 ec       	ldi	r24, 0xC4	; 196
     50a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR0 & (1<<TWINT)) == 0);
     50e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     512:	88 23       	and	r24, r24
     514:	e4 f7       	brge	.-8      	; 0x50e <TWIReadACK+0x6>
	return TWDR0;
     516:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     51a:	08 95       	ret

0000051c <TWIReadNACK>:

uint8_t TWIReadNACK(void) {
	TWCR0 = (1<<TWINT)|(1<<TWEN);
     51c:	84 e8       	ldi	r24, 0x84	; 132
     51e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR0 & (1<<TWINT)) == 0);
     522:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     526:	88 23       	and	r24, r24
     528:	e4 f7       	brge	.-8      	; 0x522 <TWIReadNACK+0x6>
	return TWDR0;
     52a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     52e:	08 95       	ret

00000530 <TWIGetStatus>:

uint8_t TWIGetStatus(void) {
	return TWSR0 & 0xF8;
     530:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
}
     534:	88 7f       	andi	r24, 0xF8	; 248
     536:	08 95       	ret

00000538 <__vector_11>:
	}
	printf("Setting RTC to %02d:%02d:%02d\n", hour, minute, second);
	printf("Setting Second: %d\n", writeDS3231(0x00, (second/10*16) + (second%10) ));
	printf("Setting Minute: %d\n", writeDS3231(0x01, (minute/10*16) + (minute%10) ));
	printf("Setting Hour: %d\n", writeDS3231(0x02, (hour/10*16) + (hour%10) ));
}
     538:	1f 92       	push	r1
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	8f 93       	push	r24
     544:	9f 93       	push	r25
     546:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <t_second>
     54a:	8f 5f       	subi	r24, 0xFF	; 255
     54c:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <t_second>
     550:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <t_second>
     554:	8c 33       	cpi	r24, 0x3C	; 60
     556:	c0 f0       	brcs	.+48     	; 0x588 <__vector_11+0x50>
     558:	10 92 8d 06 	sts	0x068D, r1	; 0x80068d <t_second>
     55c:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <t_minute>
     560:	8f 5f       	subi	r24, 0xFF	; 255
     562:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <t_minute>
     566:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <t_minute>
     56a:	8c 33       	cpi	r24, 0x3C	; 60
     56c:	68 f0       	brcs	.+26     	; 0x588 <__vector_11+0x50>
     56e:	10 92 8e 06 	sts	0x068E, r1	; 0x80068e <t_minute>
     572:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     576:	8f 5f       	subi	r24, 0xFF	; 255
     578:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <t_hour>
     57c:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     580:	88 31       	cpi	r24, 0x18	; 24
     582:	10 f0       	brcs	.+4      	; 0x588 <__vector_11+0x50>
     584:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <t_hour>
     588:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <humidity_alarm>
     58c:	88 23       	and	r24, r24
     58e:	b9 f0       	breq	.+46     	; 0x5be <__vector_11+0x86>
     590:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <t_second>
     594:	80 fd       	sbrc	r24, 0
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <__vector_11+0x68>
     598:	88 b1       	in	r24, 0x08	; 8
     59a:	82 60       	ori	r24, 0x02	; 2
     59c:	88 b9       	out	0x08, r24	; 8
     59e:	03 c0       	rjmp	.+6      	; 0x5a6 <__vector_11+0x6e>
     5a0:	88 b1       	in	r24, 0x08	; 8
     5a2:	8d 7f       	andi	r24, 0xFD	; 253
     5a4:	88 b9       	out	0x08, r24	; 8
     5a6:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <t_second>
     5aa:	80 ff       	sbrs	r24, 0
     5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <__vector_11+0x7e>
     5ae:	88 b1       	in	r24, 0x08	; 8
     5b0:	88 60       	ori	r24, 0x08	; 8
     5b2:	88 b9       	out	0x08, r24	; 8
     5b4:	31 c0       	rjmp	.+98     	; 0x618 <__vector_11+0xe0>
     5b6:	88 b1       	in	r24, 0x08	; 8
     5b8:	87 7f       	andi	r24, 0xF7	; 247
     5ba:	88 b9       	out	0x08, r24	; 8
     5bc:	2d c0       	rjmp	.+90     	; 0x618 <__vector_11+0xe0>
     5be:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <pump_mode>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	59 f4       	brne	.+22     	; 0x5dc <__vector_11+0xa4>
     5c6:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <t_second>
     5ca:	80 fd       	sbrc	r24, 0
     5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <__vector_11+0x9e>
     5ce:	88 b1       	in	r24, 0x08	; 8
     5d0:	82 60       	ori	r24, 0x02	; 2
     5d2:	88 b9       	out	0x08, r24	; 8
     5d4:	03 c0       	rjmp	.+6      	; 0x5dc <__vector_11+0xa4>
     5d6:	88 b1       	in	r24, 0x08	; 8
     5d8:	8d 7f       	andi	r24, 0xFD	; 253
     5da:	88 b9       	out	0x08, r24	; 8
     5dc:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <pump_mode>
     5e0:	84 30       	cpi	r24, 0x04	; 4
     5e2:	59 f4       	brne	.+22     	; 0x5fa <__vector_11+0xc2>
     5e4:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <t_second>
     5e8:	80 fd       	sbrc	r24, 0
     5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <__vector_11+0xbc>
     5ec:	88 b1       	in	r24, 0x08	; 8
     5ee:	88 60       	ori	r24, 0x08	; 8
     5f0:	88 b9       	out	0x08, r24	; 8
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <__vector_11+0xc2>
     5f4:	88 b1       	in	r24, 0x08	; 8
     5f6:	87 7f       	andi	r24, 0xF7	; 247
     5f8:	88 b9       	out	0x08, r24	; 8
     5fa:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <pump_mode>
     5fe:	85 30       	cpi	r24, 0x05	; 5
     600:	59 f4       	brne	.+22     	; 0x618 <__vector_11+0xe0>
     602:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <t_second>
     606:	83 70       	andi	r24, 0x03	; 3
     608:	21 f4       	brne	.+8      	; 0x612 <__vector_11+0xda>
     60a:	88 b1       	in	r24, 0x08	; 8
     60c:	88 60       	ori	r24, 0x08	; 8
     60e:	88 b9       	out	0x08, r24	; 8
     610:	03 c0       	rjmp	.+6      	; 0x618 <__vector_11+0xe0>
     612:	88 b1       	in	r24, 0x08	; 8
     614:	87 7f       	andi	r24, 0xF7	; 247
     616:	88 b9       	out	0x08, r24	; 8
     618:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <pump_remaining>
     61c:	88 23       	and	r24, r24
     61e:	29 f0       	breq	.+10     	; 0x62a <__vector_11+0xf2>
     620:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <pump_remaining>
     624:	81 50       	subi	r24, 0x01	; 1
     626:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <pump_remaining>
     62a:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <pump_mode>
     62e:	82 30       	cpi	r24, 0x02	; 2
     630:	39 f4       	brne	.+14     	; 0x640 <__vector_11+0x108>
     632:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <pump_remaining>
     636:	91 11       	cpse	r25, r1
     638:	03 c0       	rjmp	.+6      	; 0x640 <__vector_11+0x108>
     63a:	93 e0       	ldi	r25, 0x03	; 3
     63c:	90 93 98 06 	sts	0x0698, r25	; 0x800698 <pump_mode_next>
     640:	90 91 8d 06 	lds	r25, 0x068D	; 0x80068d <t_second>
     644:	9e 31       	cpi	r25, 0x1E	; 30
     646:	19 f4       	brne	.+6      	; 0x64e <__vector_11+0x116>
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <triggerHTU>
     64e:	90 91 8d 06 	lds	r25, 0x068D	; 0x80068d <t_second>
     652:	91 11       	cpse	r25, r1
     654:	61 c0       	rjmp	.+194    	; 0x718 <__vector_11+0x1e0>
     656:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     65a:	9f 30       	cpi	r25, 0x0F	; 15
     65c:	21 f0       	breq	.+8      	; 0x666 <__vector_11+0x12e>
     65e:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     662:	9d 32       	cpi	r25, 0x2D	; 45
     664:	19 f4       	brne	.+6      	; 0x66c <__vector_11+0x134>
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <triggerRTC>
     66c:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     670:	91 11       	cpse	r25, r1
     672:	52 c0       	rjmp	.+164    	; 0x718 <__vector_11+0x1e0>
     674:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <t_hour>
     678:	91 11       	cpse	r25, r1
     67a:	03 c0       	rjmp	.+6      	; 0x682 <__vector_11+0x14a>
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <triggerMidnight>
     682:	81 11       	cpse	r24, r1
     684:	49 c0       	rjmp	.+146    	; 0x718 <__vector_11+0x1e0>
     686:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <tempMax>
     68a:	87 31       	cpi	r24, 0x17	; 23
     68c:	38 f4       	brcc	.+14     	; 0x69c <__vector_11+0x164>
     68e:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <t_hour>
     692:	9f 30       	cpi	r25, 0x0F	; 15
     694:	19 f4       	brne	.+6      	; 0x69c <__vector_11+0x164>
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	90 93 98 06 	sts	0x0698, r25	; 0x800698 <pump_mode_next>
     69c:	99 ee       	ldi	r25, 0xE9	; 233
     69e:	98 0f       	add	r25, r24
     6a0:	94 30       	cpi	r25, 0x04	; 4
     6a2:	58 f4       	brcc	.+22     	; 0x6ba <__vector_11+0x182>
     6a4:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <t_hour>
     6a8:	9f 30       	cpi	r25, 0x0F	; 15
     6aa:	21 f0       	breq	.+8      	; 0x6b4 <__vector_11+0x17c>
     6ac:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <t_hour>
     6b0:	95 31       	cpi	r25, 0x15	; 21
     6b2:	19 f4       	brne	.+6      	; 0x6ba <__vector_11+0x182>
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	90 93 98 06 	sts	0x0698, r25	; 0x800698 <pump_mode_next>
     6ba:	95 ee       	ldi	r25, 0xE5	; 229
     6bc:	98 0f       	add	r25, r24
     6be:	94 30       	cpi	r25, 0x04	; 4
     6c0:	78 f4       	brcc	.+30     	; 0x6e0 <__vector_11+0x1a8>
     6c2:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <t_hour>
     6c6:	9f 30       	cpi	r25, 0x0F	; 15
     6c8:	41 f0       	breq	.+16     	; 0x6da <__vector_11+0x1a2>
     6ca:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <t_hour>
     6ce:	92 31       	cpi	r25, 0x12	; 18
     6d0:	21 f0       	breq	.+8      	; 0x6da <__vector_11+0x1a2>
     6d2:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <t_hour>
     6d6:	95 31       	cpi	r25, 0x15	; 21
     6d8:	19 f4       	brne	.+6      	; 0x6e0 <__vector_11+0x1a8>
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	90 93 98 06 	sts	0x0698, r25	; 0x800698 <pump_mode_next>
     6e0:	8f 31       	cpi	r24, 0x1F	; 31
     6e2:	78 f0       	brcs	.+30     	; 0x702 <__vector_11+0x1ca>
     6e4:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     6e8:	8f 30       	cpi	r24, 0x0F	; 15
     6ea:	41 f0       	breq	.+16     	; 0x6fc <__vector_11+0x1c4>
     6ec:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     6f0:	82 31       	cpi	r24, 0x12	; 18
     6f2:	21 f0       	breq	.+8      	; 0x6fc <__vector_11+0x1c4>
     6f4:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     6f8:	85 31       	cpi	r24, 0x15	; 21
     6fa:	19 f4       	brne	.+6      	; 0x702 <__vector_11+0x1ca>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pump_mode_next>
     702:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <tempMaxLast>
     706:	8f 31       	cpi	r24, 0x1F	; 31
     708:	38 f0       	brcs	.+14     	; 0x718 <__vector_11+0x1e0>
     70a:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     70e:	89 30       	cpi	r24, 0x09	; 9
     710:	19 f4       	brne	.+6      	; 0x718 <__vector_11+0x1e0>
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pump_mode_next>
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <btnNow>:
     726:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     72a:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     72e:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     732:	1f 92       	push	r1
     734:	2f 93       	push	r18
     736:	1f 92       	push	r1
     738:	9f 93       	push	r25
     73a:	1f 92       	push	r1
     73c:	8f 93       	push	r24
     73e:	84 e2       	ldi	r24, 0x24	; 36
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
     74a:	8d b7       	in	r24, 0x3d	; 61
     74c:	9e b7       	in	r25, 0x3e	; 62
     74e:	08 96       	adiw	r24, 0x08	; 8
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	9e bf       	out	0x3e, r25	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	8d bf       	out	0x3d, r24	; 61
     75a:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <pump_mode>
     75e:	84 30       	cpi	r24, 0x04	; 4
     760:	41 f0       	breq	.+16     	; 0x772 <btnNow+0x4c>
     762:	85 30       	cpi	r24, 0x05	; 5
     764:	49 f0       	breq	.+18     	; 0x778 <btnNow+0x52>
     766:	81 11       	cpse	r24, r1
     768:	0a c0       	rjmp	.+20     	; 0x77e <btnNow+0x58>
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pump_mode_next>
     770:	08 95       	ret
     772:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <pump_mode_next>
     776:	08 95       	ret
     778:	84 e0       	ldi	r24, 0x04	; 4
     77a:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pump_mode_next>
     77e:	08 95       	ret

00000780 <btnWait>:
     780:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     784:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     788:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     78c:	1f 92       	push	r1
     78e:	2f 93       	push	r18
     790:	1f 92       	push	r1
     792:	9f 93       	push	r25
     794:	1f 92       	push	r1
     796:	8f 93       	push	r24
     798:	80 e4       	ldi	r24, 0x40	; 64
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	9f 93       	push	r25
     79e:	8f 93       	push	r24
     7a0:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
     7a4:	8d b7       	in	r24, 0x3d	; 61
     7a6:	9e b7       	in	r25, 0x3e	; 62
     7a8:	08 96       	adiw	r24, 0x08	; 8
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	9e bf       	out	0x3e, r25	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	8d bf       	out	0x3d, r24	; 61
     7b4:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <pump_mode>
     7b8:	82 30       	cpi	r24, 0x02	; 2
     7ba:	99 f0       	breq	.+38     	; 0x7e2 <btnWait+0x62>
     7bc:	28 f4       	brcc	.+10     	; 0x7c8 <btnWait+0x48>
     7be:	88 23       	and	r24, r24
     7c0:	41 f0       	breq	.+16     	; 0x7d2 <btnWait+0x52>
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	51 f0       	breq	.+20     	; 0x7da <btnWait+0x5a>
     7c6:	08 95       	ret
     7c8:	83 30       	cpi	r24, 0x03	; 3
     7ca:	79 f0       	breq	.+30     	; 0x7ea <btnWait+0x6a>
     7cc:	84 30       	cpi	r24, 0x04	; 4
     7ce:	89 f0       	breq	.+34     	; 0x7f2 <btnWait+0x72>
     7d0:	08 95       	ret
     7d2:	84 e0       	ldi	r24, 0x04	; 4
     7d4:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pump_mode_next>
     7d8:	08 95       	ret
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pump_mode_next>
     7e0:	08 95       	ret
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pump_mode_next>
     7e8:	08 95       	ret
     7ea:	84 e0       	ldi	r24, 0x04	; 4
     7ec:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pump_mode_next>
     7f0:	08 95       	ret
     7f2:	85 e0       	ldi	r24, 0x05	; 5
     7f4:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pump_mode_next>
     7f8:	08 95       	ret

000007fa <readHTU21>:
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	c8 2f       	mov	r28, r24
     800:	0e 94 6e 02 	call	0x4dc	; 0x4dc <TWIStart>
     804:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     808:	88 30       	cpi	r24, 0x08	; 8
     80a:	b9 f5       	brne	.+110    	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     80c:	80 e8       	ldi	r24, 0x80	; 128
     80e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TWIWrite>
     812:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     816:	88 31       	cpi	r24, 0x18	; 24
     818:	99 f5       	brne	.+102    	; 0x880 <__DATA_REGION_LENGTH__+0x80>
     81a:	8c 2f       	mov	r24, r28
     81c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TWIWrite>
     820:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     824:	88 32       	cpi	r24, 0x28	; 40
     826:	79 f5       	brne	.+94     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     828:	0e 94 6e 02 	call	0x4dc	; 0x4dc <TWIStart>
     82c:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     830:	80 31       	cpi	r24, 0x10	; 16
     832:	61 f5       	brne	.+88     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
     834:	81 e8       	ldi	r24, 0x81	; 129
     836:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TWIWrite>
     83a:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     83e:	80 34       	cpi	r24, 0x40	; 64
     840:	41 f5       	brne	.+80     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     842:	0e 94 84 02 	call	0x508	; 0x508 <TWIReadACK>
     846:	c8 2f       	mov	r28, r24
     848:	d0 e0       	ldi	r29, 0x00	; 0
     84a:	dc 2f       	mov	r29, r28
     84c:	cc 27       	eor	r28, r28
     84e:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     852:	80 35       	cpi	r24, 0x50	; 80
     854:	09 f5       	brne	.+66     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     856:	0e 94 84 02 	call	0x508	; 0x508 <TWIReadACK>
     85a:	c8 2b       	or	r28, r24
     85c:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     860:	80 35       	cpi	r24, 0x50	; 80
     862:	e9 f4       	brne	.+58     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
     864:	0e 94 8e 02 	call	0x51c	; 0x51c <TWIReadNACK>
     868:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     86c:	88 35       	cpi	r24, 0x58	; 88
     86e:	d1 f4       	brne	.+52     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
     870:	0e 94 76 02 	call	0x4ec	; 0x4ec <TWIStop>
     874:	ce 01       	movw	r24, r28
     876:	8c 7f       	andi	r24, 0xFC	; 252
     878:	17 c0       	rjmp	.+46     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	14 c0       	rjmp	.+40     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	11 c0       	rjmp	.+34     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e c0       	rjmp	.+28     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
     88c:	84 e0       	ldi	r24, 0x04	; 4
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
     892:	85 e0       	ldi	r24, 0x05	; 5
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	08 c0       	rjmp	.+16     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
     898:	86 e0       	ldi	r24, 0x06	; 6
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	05 c0       	rjmp	.+10     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
     89e:	87 e0       	ldi	r24, 0x07	; 7
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
     8a4:	88 e0       	ldi	r24, 0x08	; 8
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <readTemperature>:
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	83 ee       	ldi	r24, 0xE3	; 227
     8b8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <readHTU21>
     8bc:	bc 01       	movw	r22, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 0d 0a 	call	0x141a	; 0x141a <__floatunsisf>
     8c6:	22 e5       	ldi	r18, 0x52	; 82
     8c8:	38 eb       	ldi	r19, 0xB8	; 184
     8ca:	4f e2       	ldi	r20, 0x2F	; 47
     8cc:	53 e4       	ldi	r21, 0x43	; 67
     8ce:	0e 94 bf 0a 	call	0x157e	; 0x157e <__mulsf3>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 e8       	ldi	r20, 0x80	; 128
     8d8:	57 e3       	ldi	r21, 0x37	; 55
     8da:	0e 94 bf 0a 	call	0x157e	; 0x157e <__mulsf3>
     8de:	26 e6       	ldi	r18, 0x66	; 102
     8e0:	36 e6       	ldi	r19, 0x66	; 102
     8e2:	4b e3       	ldi	r20, 0x3B	; 59
     8e4:	52 e4       	ldi	r21, 0x42	; 66
     8e6:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__subsf3>
     8ea:	6b 01       	movw	r12, r22
     8ec:	7c 01       	movw	r14, r24
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	a9 01       	movw	r20, r18
     8f4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__cmpsf2>
     8f8:	88 23       	and	r24, r24
     8fa:	1c f4       	brge	.+6      	; 0x902 <__stack+0x3>
     8fc:	c1 2c       	mov	r12, r1
     8fe:	d1 2c       	mov	r13, r1
     900:	76 01       	movw	r14, r12
     902:	c7 01       	movw	r24, r14
     904:	b6 01       	movw	r22, r12
     906:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fixunssfsi>
     90a:	86 2f       	mov	r24, r22
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	cf 90       	pop	r12
     916:	08 95       	ret

00000918 <readHumidity>:
     918:	cf 92       	push	r12
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	83 ee       	ldi	r24, 0xE3	; 227
     922:	0e 94 fd 03 	call	0x7fa	; 0x7fa <readHTU21>
     926:	bc 01       	movw	r22, r24
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 0d 0a 	call	0x141a	; 0x141a <__floatunsisf>
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	4a ef       	ldi	r20, 0xFA	; 250
     936:	52 e4       	ldi	r21, 0x42	; 66
     938:	0e 94 bf 0a 	call	0x157e	; 0x157e <__mulsf3>
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e8       	ldi	r20, 0x80	; 128
     942:	57 e3       	ldi	r21, 0x37	; 55
     944:	0e 94 bf 0a 	call	0x157e	; 0x157e <__mulsf3>
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	40 ec       	ldi	r20, 0xC0	; 192
     94e:	50 e4       	ldi	r21, 0x40	; 64
     950:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__subsf3>
     954:	6b 01       	movw	r12, r22
     956:	7c 01       	movw	r14, r24
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	a9 01       	movw	r20, r18
     95e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__cmpsf2>
     962:	88 23       	and	r24, r24
     964:	1c f4       	brge	.+6      	; 0x96c <readHumidity+0x54>
     966:	c1 2c       	mov	r12, r1
     968:	d1 2c       	mov	r13, r1
     96a:	76 01       	movw	r14, r12
     96c:	c7 01       	movw	r24, r14
     96e:	b6 01       	movw	r22, r12
     970:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fixunssfsi>
     974:	86 2f       	mov	r24, r22
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	08 95       	ret

00000980 <readDS3231>:

uint8_t readDS3231(uint8_t cmd) {
     980:	cf 93       	push	r28
     982:	c8 2f       	mov	r28, r24
	uint8_t rawValue = 0;
	
	TWIStart();
     984:	0e 94 6e 02 	call	0x4dc	; 0x4dc <TWIStart>
	if (TWIGetStatus() != 0x08)	return 1;
     988:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     98c:	88 30       	cpi	r24, 0x08	; 8
     98e:	11 f5       	brne	.+68     	; 0x9d4 <readDS3231+0x54>
	
	TWIWrite(0xD0);
     990:	80 ed       	ldi	r24, 0xD0	; 208
     992:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TWIWrite>
	if (TWIGetStatus() != 0x18)	return 2;
     996:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     99a:	88 31       	cpi	r24, 0x18	; 24
     99c:	e9 f4       	brne	.+58     	; 0x9d8 <readDS3231+0x58>

	TWIWrite(cmd);
     99e:	8c 2f       	mov	r24, r28
     9a0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TWIWrite>
	if (TWIGetStatus() != 0x28)	return 3;
     9a4:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     9a8:	88 32       	cpi	r24, 0x28	; 40
     9aa:	c1 f4       	brne	.+48     	; 0x9dc <readDS3231+0x5c>
	
	TWIStart();
     9ac:	0e 94 6e 02 	call	0x4dc	; 0x4dc <TWIStart>
	
	TWIWrite(0xD1);
     9b0:	81 ed       	ldi	r24, 0xD1	; 209
     9b2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TWIWrite>
	if (TWIGetStatus() != 0x40) return 4;
     9b6:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     9ba:	80 34       	cpi	r24, 0x40	; 64
     9bc:	89 f4       	brne	.+34     	; 0x9e0 <readDS3231+0x60>
	
	rawValue = (uint16_t)TWIReadNACK();
     9be:	0e 94 8e 02 	call	0x51c	; 0x51c <TWIReadNACK>
     9c2:	c8 2f       	mov	r28, r24
	if (TWIGetStatus() != 0x58)	return 5;
     9c4:	0e 94 98 02 	call	0x530	; 0x530 <TWIGetStatus>
     9c8:	88 35       	cpi	r24, 0x58	; 88
     9ca:	61 f4       	brne	.+24     	; 0x9e4 <readDS3231+0x64>

	TWIStop();
     9cc:	0e 94 76 02 	call	0x4ec	; 0x4ec <TWIStop>
	
	return rawValue;
     9d0:	8c 2f       	mov	r24, r28
     9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <readDS3231+0x66>

uint8_t readDS3231(uint8_t cmd) {
	uint8_t rawValue = 0;
	
	TWIStart();
	if (TWIGetStatus() != 0x08)	return 1;
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	07 c0       	rjmp	.+14     	; 0x9e6 <readDS3231+0x66>
	
	TWIWrite(0xD0);
	if (TWIGetStatus() != 0x18)	return 2;
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	05 c0       	rjmp	.+10     	; 0x9e6 <readDS3231+0x66>

	TWIWrite(cmd);
	if (TWIGetStatus() != 0x28)	return 3;
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <readDS3231+0x66>
	
	TWIStart();
	
	TWIWrite(0xD1);
	if (TWIGetStatus() != 0x40) return 4;
     9e0:	84 e0       	ldi	r24, 0x04	; 4
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <readDS3231+0x66>
	
	rawValue = (uint16_t)TWIReadNACK();
	if (TWIGetStatus() != 0x58)	return 5;
     9e4:	85 e0       	ldi	r24, 0x05	; 5

	TWIStop();
	
	return rawValue;
}
     9e6:	cf 91       	pop	r28
     9e8:	08 95       	ret

000009ea <syncRTC>:

void syncRTC() {
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
	printf("%02d:%02d:%02d RTC update: ", t_hour, t_minute, t_second);
     9ee:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     9f2:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     9f6:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     9fa:	1f 92       	push	r1
     9fc:	2f 93       	push	r18
     9fe:	1f 92       	push	r1
     a00:	9f 93       	push	r25
     a02:	1f 92       	push	r1
     a04:	8f 93       	push	r24
     a06:	8a ed       	ldi	r24, 0xDA	; 218
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	9f 93       	push	r25
     a0c:	8f 93       	push	r24
     a0e:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
	
	uint8_t secRaw = readDS3231(0x00);
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 c0 04 	call	0x980	; 0x980 <readDS3231>
	uint8_t secValue = (secRaw >> 4) * 10 + (secRaw & 0b00001111);
     a18:	d8 2f       	mov	r29, r24
     a1a:	d2 95       	swap	r29
     a1c:	df 70       	andi	r29, 0x0F	; 15
     a1e:	dd 0f       	add	r29, r29
     a20:	9d 2f       	mov	r25, r29
     a22:	99 0f       	add	r25, r25
     a24:	99 0f       	add	r25, r25
     a26:	d9 0f       	add	r29, r25
     a28:	8f 70       	andi	r24, 0x0F	; 15
     a2a:	d8 0f       	add	r29, r24

	uint8_t minRaw = readDS3231(0x01);
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	0e 94 c0 04 	call	0x980	; 0x980 <readDS3231>
	uint8_t minValue = (minRaw >> 4) * 10 + (minRaw & 0b00001111);
     a32:	c8 2f       	mov	r28, r24
     a34:	c2 95       	swap	r28
     a36:	cf 70       	andi	r28, 0x0F	; 15
     a38:	cc 0f       	add	r28, r28
     a3a:	9c 2f       	mov	r25, r28
     a3c:	99 0f       	add	r25, r25
     a3e:	99 0f       	add	r25, r25
     a40:	c9 0f       	add	r28, r25
     a42:	8f 70       	andi	r24, 0x0F	; 15
     a44:	c8 0f       	add	r28, r24

	uint8_t hrsRaw = readDS3231(0x02);
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	0e 94 c0 04 	call	0x980	; 0x980 <readDS3231>
	uint8_t hrsValue = ((hrsRaw & 0b00110000) >> 4) * 10 + (hrsRaw & 0b00001111);
     a4c:	28 2f       	mov	r18, r24
     a4e:	20 73       	andi	r18, 0x30	; 48
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	35 95       	asr	r19
     a54:	27 95       	ror	r18
     a56:	35 95       	asr	r19
     a58:	27 95       	ror	r18
     a5a:	35 95       	asr	r19
     a5c:	27 95       	ror	r18
     a5e:	35 95       	asr	r19
     a60:	27 95       	ror	r18
     a62:	22 0f       	add	r18, r18
     a64:	92 2f       	mov	r25, r18
     a66:	99 0f       	add	r25, r25
     a68:	99 0f       	add	r25, r25
     a6a:	29 0f       	add	r18, r25
     a6c:	8f 70       	andi	r24, 0x0F	; 15
     a6e:	28 0f       	add	r18, r24

	t_second = secValue;
     a70:	d0 93 8d 06 	sts	0x068D, r29	; 0x80068d <t_second>
	t_minute = minValue;
     a74:	c0 93 8e 06 	sts	0x068E, r28	; 0x80068e <t_minute>
	t_hour = hrsValue;
     a78:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <t_hour>

	printf("%02d:%02d:%02d\n", hrsValue, minValue, secValue);
     a7c:	1f 92       	push	r1
     a7e:	df 93       	push	r29
     a80:	1f 92       	push	r1
     a82:	cf 93       	push	r28
     a84:	1f 92       	push	r1
     a86:	2f 93       	push	r18
     a88:	86 ee       	ldi	r24, 0xE6	; 230
     a8a:	94 e0       	ldi	r25, 0x04	; 4
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
}
     a94:	8d b7       	in	r24, 0x3d	; 61
     a96:	9e b7       	in	r25, 0x3e	; 62
     a98:	40 96       	adiw	r24, 0x10	; 16
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	9e bf       	out	0x3e, r25	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	8d bf       	out	0x3d, r24	; 61
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <eepromInit>:

// ---------------------------------------------- EEPROM

void eepromInit() {
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
	eeprom_index = (FLASH_0_read_eeprom_byte(0x3FE) << 8) + FLASH_0_read_eeprom_byte(0x3FF);
     aae:	8e ef       	ldi	r24, 0xFE	; 254
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	0e 94 3f 01 	call	0x27e	; 0x27e <FLASH_0_read_eeprom_byte>
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	d8 2f       	mov	r29, r24
     aba:	cc 27       	eor	r28, r28
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	93 e0       	ldi	r25, 0x03	; 3
     ac0:	0e 94 3f 01 	call	0x27e	; 0x27e <FLASH_0_read_eeprom_byte>
     ac4:	9e 01       	movw	r18, r28
     ac6:	28 0f       	add	r18, r24
     ac8:	31 1d       	adc	r19, r1
     aca:	c9 01       	movw	r24, r18
     acc:	20 93 92 06 	sts	0x0692, r18	; 0x800692 <eeprom_index>
     ad0:	90 93 93 06 	sts	0x0693, r25	; 0x800693 <eeprom_index+0x1>
	printf("%02d:%02d:%02d EEPROM index: %d\n", t_hour, t_minute, t_second, eeprom_index);
     ad4:	40 91 8d 06 	lds	r20, 0x068D	; 0x80068d <t_second>
     ad8:	30 91 8e 06 	lds	r19, 0x068E	; 0x80068e <t_minute>
     adc:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <t_hour>
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	1f 92       	push	r1
     ae6:	4f 93       	push	r20
     ae8:	1f 92       	push	r1
     aea:	3f 93       	push	r19
     aec:	1f 92       	push	r1
     aee:	2f 93       	push	r18
     af0:	86 ef       	ldi	r24, 0xF6	; 246
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	9f 93       	push	r25
     af6:	8f 93       	push	r24
     af8:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
}
     afc:	8d b7       	in	r24, 0x3d	; 61
     afe:	9e b7       	in	r25, 0x3e	; 62
     b00:	0a 96       	adiw	r24, 0x0a	; 10
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	9e bf       	out	0x3e, r25	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	8d bf       	out	0x3d, r24	; 61
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <eepromWipe>:

void eepromWipe() {
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
	printf("%02d:%02d:%02d Clearing EEPROM ...", t_hour, t_minute, t_second);
     b16:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     b1a:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     b1e:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     b22:	1f 92       	push	r1
     b24:	2f 93       	push	r18
     b26:	1f 92       	push	r1
     b28:	9f 93       	push	r25
     b2a:	1f 92       	push	r1
     b2c:	8f 93       	push	r24
     b2e:	87 e1       	ldi	r24, 0x17	; 23
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	9f 93       	push	r25
     b34:	8f 93       	push	r24
     b36:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
	for (uint16_t i = 0; i < 0x3FF; i++) {
     b3a:	8d b7       	in	r24, 0x3d	; 61
     b3c:	9e b7       	in	r25, 0x3e	; 62
     b3e:	08 96       	adiw	r24, 0x08	; 8
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	9e bf       	out	0x3e, r25	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	8d bf       	out	0x3d, r24	; 61
     b4a:	c0 e0       	ldi	r28, 0x00	; 0
     b4c:	d0 e0       	ldi	r29, 0x00	; 0
     b4e:	05 c0       	rjmp	.+10     	; 0xb5a <eepromWipe+0x48>
		FLASH_0_write_eeprom_byte(i, 0xFF);
     b50:	6f ef       	ldi	r22, 0xFF	; 255
     b52:	ce 01       	movw	r24, r28
     b54:	0e 94 48 01 	call	0x290	; 0x290 <FLASH_0_write_eeprom_byte>
	printf("%02d:%02d:%02d EEPROM index: %d\n", t_hour, t_minute, t_second, eeprom_index);
}

void eepromWipe() {
	printf("%02d:%02d:%02d Clearing EEPROM ...", t_hour, t_minute, t_second);
	for (uint16_t i = 0; i < 0x3FF; i++) {
     b58:	21 96       	adiw	r28, 0x01	; 1
     b5a:	cf 3f       	cpi	r28, 0xFF	; 255
     b5c:	93 e0       	ldi	r25, 0x03	; 3
     b5e:	d9 07       	cpc	r29, r25
     b60:	b8 f3       	brcs	.-18     	; 0xb50 <eepromWipe+0x3e>
		FLASH_0_write_eeprom_byte(i, 0xFF);
	}
	
	FLASH_0_write_eeprom_byte(0x3FE, 0);
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	8e ef       	ldi	r24, 0xFE	; 254
     b66:	93 e0       	ldi	r25, 0x03	; 3
     b68:	0e 94 48 01 	call	0x290	; 0x290 <FLASH_0_write_eeprom_byte>
	FLASH_0_write_eeprom_byte(0x3FF, 0);	
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	93 e0       	ldi	r25, 0x03	; 3
     b72:	0e 94 48 01 	call	0x290	; 0x290 <FLASH_0_write_eeprom_byte>
	printf(" done\n");
     b76:	8a e3       	ldi	r24, 0x3A	; 58
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>

	eepromInit();
     b7e:	0e 94 55 05 	call	0xaaa	; 0xaaa <eepromInit>
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <eepromUpdate>:

void eepromUpdate(uint8_t t, uint8_t h) {
     b88:	cf 93       	push	r28
     b8a:	c6 2f       	mov	r28, r22
	FLASH_0_write_eeprom_byte(eeprom_index, t);
     b8c:	68 2f       	mov	r22, r24
     b8e:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <eeprom_index>
     b92:	90 91 93 06 	lds	r25, 0x0693	; 0x800693 <eeprom_index+0x1>
     b96:	0e 94 48 01 	call	0x290	; 0x290 <FLASH_0_write_eeprom_byte>
	eeprom_index++;
     b9a:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <eeprom_index>
     b9e:	90 91 93 06 	lds	r25, 0x0693	; 0x800693 <eeprom_index+0x1>
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	90 93 93 06 	sts	0x0693, r25	; 0x800693 <eeprom_index+0x1>
     ba8:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <eeprom_index>
	FLASH_0_write_eeprom_byte(eeprom_index, h);
     bac:	6c 2f       	mov	r22, r28
     bae:	0e 94 48 01 	call	0x290	; 0x290 <FLASH_0_write_eeprom_byte>
	eeprom_index++;
     bb2:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <eeprom_index>
     bb6:	90 91 93 06 	lds	r25, 0x0693	; 0x800693 <eeprom_index+0x1>
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	90 93 93 06 	sts	0x0693, r25	; 0x800693 <eeprom_index+0x1>
     bc0:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <eeprom_index>
	if (eeprom_index >= 0x3FE) {
     bc4:	8e 3f       	cpi	r24, 0xFE	; 254
     bc6:	93 40       	sbci	r25, 0x03	; 3
     bc8:	20 f0       	brcs	.+8      	; 0xbd2 <eepromUpdate+0x4a>
		eeprom_index = 0;
     bca:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <eeprom_index+0x1>
     bce:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <eeprom_index>
	}
	FLASH_0_write_eeprom_byte(0x3FE, eeprom_index >> 8);
     bd2:	60 91 93 06 	lds	r22, 0x0693	; 0x800693 <eeprom_index+0x1>
     bd6:	8e ef       	ldi	r24, 0xFE	; 254
     bd8:	93 e0       	ldi	r25, 0x03	; 3
     bda:	0e 94 48 01 	call	0x290	; 0x290 <FLASH_0_write_eeprom_byte>
	FLASH_0_write_eeprom_byte(0x3FF, eeprom_index);
     bde:	60 91 92 06 	lds	r22, 0x0692	; 0x800692 <eeprom_index>
     be2:	8f ef       	ldi	r24, 0xFF	; 255
     be4:	93 e0       	ldi	r25, 0x03	; 3
     be6:	0e 94 48 01 	call	0x290	; 0x290 <FLASH_0_write_eeprom_byte>
	
	printf("%02d:%02d:%02d EEPROM new index: %d\n", t_hour, t_minute, t_second, eeprom_index);
     bea:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     bee:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     bf2:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     bf6:	30 91 93 06 	lds	r19, 0x0693	; 0x800693 <eeprom_index+0x1>
     bfa:	3f 93       	push	r19
     bfc:	30 91 92 06 	lds	r19, 0x0692	; 0x800692 <eeprom_index>
     c00:	3f 93       	push	r19
     c02:	1f 92       	push	r1
     c04:	2f 93       	push	r18
     c06:	1f 92       	push	r1
     c08:	9f 93       	push	r25
     c0a:	1f 92       	push	r1
     c0c:	8f 93       	push	r24
     c0e:	80 e4       	ldi	r24, 0x40	; 64
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	9f 93       	push	r25
     c14:	8f 93       	push	r24
     c16:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
}
     c1a:	8d b7       	in	r24, 0x3d	; 61
     c1c:	9e b7       	in	r25, 0x3e	; 62
     c1e:	0a 96       	adiw	r24, 0x0a	; 10
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	9e bf       	out	0x3e, r25	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	8d bf       	out	0x3d, r24	; 61
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <eepromDump>:

void eepromDump() {
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
	printf("%02d:%02d:%02d EEPROM history\n", t_hour, t_minute, t_second);	
     c38:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     c3c:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     c40:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     c44:	1f 92       	push	r1
     c46:	2f 93       	push	r18
     c48:	1f 92       	push	r1
     c4a:	9f 93       	push	r25
     c4c:	1f 92       	push	r1
     c4e:	8f 93       	push	r24
     c50:	85 e6       	ldi	r24, 0x65	; 101
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	9f 93       	push	r25
     c56:	8f 93       	push	r24
     c58:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
	printf("Day |Temp| Humid\n");
     c5c:	84 e8       	ldi	r24, 0x84	; 132
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
	
	uint16_t days = 0;
	
	for (uint16_t i = eeprom_index; i > 0; i-=2) {
     c64:	00 91 92 06 	lds	r16, 0x0692	; 0x800692 <eeprom_index>
     c68:	10 91 93 06 	lds	r17, 0x0693	; 0x800693 <eeprom_index+0x1>
     c6c:	8d b7       	in	r24, 0x3d	; 61
     c6e:	9e b7       	in	r25, 0x3e	; 62
     c70:	08 96       	adiw	r24, 0x08	; 8
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	9e bf       	out	0x3e, r25	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	8d bf       	out	0x3d, r24	; 61

void eepromDump() {
	printf("%02d:%02d:%02d EEPROM history\n", t_hour, t_minute, t_second);	
	printf("Day |Temp| Humid\n");
	
	uint16_t days = 0;
     c7c:	c0 e0       	ldi	r28, 0x00	; 0
     c7e:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (uint16_t i = eeprom_index; i > 0; i-=2) {
     c80:	1f c0       	rjmp	.+62     	; 0xcc0 <eepromDump+0x92>
		days++;
     c82:	21 96       	adiw	r28, 0x01	; 1
		printf("%04d %02dC %02d%%\n", days, FLASH_0_read_eeprom_byte(i - 2), FLASH_0_read_eeprom_byte(i - 1));
     c84:	c8 01       	movw	r24, r16
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	0e 94 3f 01 	call	0x27e	; 0x27e <FLASH_0_read_eeprom_byte>
     c8c:	f8 2e       	mov	r15, r24
     c8e:	02 50       	subi	r16, 0x02	; 2
     c90:	11 09       	sbc	r17, r1
     c92:	c8 01       	movw	r24, r16
     c94:	0e 94 3f 01 	call	0x27e	; 0x27e <FLASH_0_read_eeprom_byte>
     c98:	1f 92       	push	r1
     c9a:	ff 92       	push	r15
     c9c:	1f 92       	push	r1
     c9e:	8f 93       	push	r24
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	85 e9       	ldi	r24, 0x95	; 149
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	9f 93       	push	r25
     caa:	8f 93       	push	r24
     cac:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
     cb0:	8d b7       	in	r24, 0x3d	; 61
     cb2:	9e b7       	in	r25, 0x3e	; 62
     cb4:	08 96       	adiw	r24, 0x08	; 8
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	9e bf       	out	0x3e, r25	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	8d bf       	out	0x3d, r24	; 61
	printf("%02d:%02d:%02d EEPROM history\n", t_hour, t_minute, t_second);	
	printf("Day |Temp| Humid\n");
	
	uint16_t days = 0;
	
	for (uint16_t i = eeprom_index; i > 0; i-=2) {
     cc0:	01 15       	cp	r16, r1
     cc2:	11 05       	cpc	r17, r1
     cc4:	f1 f6       	brne	.-68     	; 0xc82 <eepromDump+0x54>
     cc6:	0c ef       	ldi	r16, 0xFC	; 252
     cc8:	13 e0       	ldi	r17, 0x03	; 3
     cca:	24 c0       	rjmp	.+72     	; 0xd14 <eepromDump+0xe6>

	uint8_t tvalue = 0;
	uint8_t hvalue = 0;
		
	for (uint16_t i = 0x3FC; i > eeprom_index; i-=2) {
		days++;
     ccc:	21 96       	adiw	r28, 0x01	; 1
		tvalue = FLASH_0_read_eeprom_byte(i);
     cce:	c8 01       	movw	r24, r16
     cd0:	0e 94 3f 01 	call	0x27e	; 0x27e <FLASH_0_read_eeprom_byte>
     cd4:	f8 2e       	mov	r15, r24
		hvalue = FLASH_0_read_eeprom_byte(i + 1);
     cd6:	c8 01       	movw	r24, r16
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	0e 94 3f 01 	call	0x27e	; 0x27e <FLASH_0_read_eeprom_byte>
		if (tvalue != 0xFF || hvalue != 0xFF) {
     cde:	9f ef       	ldi	r25, 0xFF	; 255
     ce0:	f9 12       	cpse	r15, r25
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <eepromDump+0xba>
     ce4:	8f 3f       	cpi	r24, 0xFF	; 255
     ce6:	a1 f0       	breq	.+40     	; 0xd10 <eepromDump+0xe2>
			printf("%04d %02dC %02d%%\n", days, tvalue, hvalue);
     ce8:	1f 92       	push	r1
     cea:	8f 93       	push	r24
     cec:	1f 92       	push	r1
     cee:	ff 92       	push	r15
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	85 e9       	ldi	r24, 0x95	; 149
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
     d00:	8d b7       	in	r24, 0x3d	; 61
     d02:	9e b7       	in	r25, 0x3e	; 62
     d04:	08 96       	adiw	r24, 0x08	; 8
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	9e bf       	out	0x3e, r25	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	8d bf       	out	0x3d, r24	; 61
	}

	uint8_t tvalue = 0;
	uint8_t hvalue = 0;
		
	for (uint16_t i = 0x3FC; i > eeprom_index; i-=2) {
     d10:	02 50       	subi	r16, 0x02	; 2
     d12:	11 09       	sbc	r17, r1
     d14:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <eeprom_index>
     d18:	90 91 93 06 	lds	r25, 0x0693	; 0x800693 <eeprom_index+0x1>
     d1c:	80 17       	cp	r24, r16
     d1e:	91 07       	cpc	r25, r17
     d20:	a8 f2       	brcs	.-86     	; 0xccc <eepromDump+0x9e>
		hvalue = FLASH_0_read_eeprom_byte(i + 1);
		if (tvalue != 0xFF || hvalue != 0xFF) {
			printf("%04d %02dC %02d%%\n", days, tvalue, hvalue);
		}
	}
	printf("\n");
     d22:	8a e0       	ldi	r24, 0x0A	; 10
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 48 0b 	call	0x1690	; 0x1690 <putchar>
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	08 95       	ret

00000d36 <readCommands>:

// ---------------------------------------------- COMMANDS

void readCommands() {
	while(USART_0_is_rx_ready()) {
     d36:	6b c1       	rjmp	.+726    	; 0x100e <readCommands+0x2d8>
		char c = USART_0_read();
     d38:	0e 94 0e 02 	call	0x41c	; 0x41c <USART_0_read>
		switch (c) {
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	fc 01       	movw	r30, r24
     d40:	f0 97       	sbiw	r30, 0x30	; 48
     d42:	eb 34       	cpi	r30, 0x4B	; 75
     d44:	f1 05       	cpc	r31, r1
     d46:	08 f0       	brcs	.+2      	; 0xd4a <readCommands+0x14>
     d48:	62 c1       	rjmp	.+708    	; 0x100e <readCommands+0x2d8>
     d4a:	e6 5a       	subi	r30, 0xA6	; 166
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__tablejump2__>
			case '?':
				printf("%02d:%02d:%02d Available commands\n", t_hour, t_minute, t_second);
     d52:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     d56:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     d5a:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     d5e:	1f 92       	push	r1
     d60:	2f 93       	push	r18
     d62:	1f 92       	push	r1
     d64:	9f 93       	push	r25
     d66:	1f 92       	push	r1
     d68:	8f 93       	push	r24
     d6a:	88 ea       	ldi	r24, 0xA8	; 168
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	9f 93       	push	r25
     d70:	8f 93       	push	r24
     d72:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
				printf("\n");
     d76:	8a e0       	ldi	r24, 0x0A	; 10
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 48 0b 	call	0x1690	; 0x1690 <putchar>
				printf("m: Measure temperature and humidity\n");
     d7e:	8b ec       	ldi	r24, 0xCB	; 203
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("z: Clear max temperature and humidity\n");
     d86:	8f ee       	ldi	r24, 0xEF	; 239
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("h: Show temperature and humidity history\n");				
     d8e:	85 e1       	ldi	r24, 0x15	; 21
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("e: Wipe temperature and humidity history\n");
     d96:	8e e3       	ldi	r24, 0x3E	; 62
     d98:	93 e0       	ldi	r25, 0x03	; 3
     d9a:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("\n");
     d9e:	8a e0       	ldi	r24, 0x0A	; 10
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 48 0b 	call	0x1690	; 0x1690 <putchar>
				printf("s: Show humidity alarm status\n");
     da6:	87 e6       	ldi	r24, 0x67	; 103
     da8:	93 e0       	ldi	r25, 0x03	; 3
     daa:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("c: Turn humidity alarm off\n");
     dae:	85 e8       	ldi	r24, 0x85	; 133
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("a: Turn humidity alarm on\n");
     db6:	80 ea       	ldi	r24, 0xA0	; 160
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("\n");
     dbe:	8a e0       	ldi	r24, 0x0A	; 10
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 48 0b 	call	0x1690	; 0x1690 <putchar>
				printf("t: Show current time\n");
     dc6:	8a eb       	ldi	r24, 0xBA	; 186
     dc8:	93 e0       	ldi	r25, 0x03	; 3
     dca:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("r: Sync time from RTC\n");
     dce:	8f ec       	ldi	r24, 0xCF	; 207
     dd0:	93 e0       	ldi	r25, 0x03	; 3
     dd2:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("f: Trigger fake midnight\n");
     dd6:	85 ee       	ldi	r24, 0xE5	; 229
     dd8:	93 e0       	ldi	r25, 0x03	; 3
     dda:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("\n");
     dde:	8a e0       	ldi	r24, 0x0A	; 10
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 48 0b 	call	0x1690	; 0x1690 <putchar>
				printf("n: Trigger NOW button\n");
     de6:	8e ef       	ldi	r24, 0xFE	; 254
     de8:	93 e0       	ldi	r25, 0x03	; 3
     dea:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("w: Trigger WAIT button\n");
     dee:	84 e1       	ldi	r24, 0x14	; 20
     df0:	94 e0       	ldi	r25, 0x04	; 4
     df2:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("\n");
     df6:	8a e0       	ldi	r24, 0x0A	; 10
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 48 0b 	call	0x1690	; 0x1690 <putchar>
				printf("0: Turn pump off\n");
     dfe:	8b e2       	ldi	r24, 0x2B	; 43
     e00:	94 e0       	ldi	r25, 0x04	; 4
     e02:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("1: Turn pump on\n");
     e06:	8c e3       	ldi	r24, 0x3C	; 60
     e08:	94 e0       	ldi	r25, 0x04	; 4
     e0a:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
				printf("\n");
     e0e:	8a e0       	ldi	r24, 0x0A	; 10
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 48 0b 	call	0x1690	; 0x1690 <putchar>
				break;
     e16:	8d b7       	in	r24, 0x3d	; 61
     e18:	9e b7       	in	r25, 0x3e	; 62
     e1a:	08 96       	adiw	r24, 0x08	; 8
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	9e bf       	out	0x3e, r25	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	8d bf       	out	0x3d, r24	; 61
     e26:	f3 c0       	rjmp	.+486    	; 0x100e <readCommands+0x2d8>

			case 'a':
			case 'A':
				printf("%02d:%02d:%02d Setting humidity alarm to ON\n", t_hour, t_minute, t_second);
     e28:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     e2c:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     e30:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     e34:	1f 92       	push	r1
     e36:	2f 93       	push	r18
     e38:	1f 92       	push	r1
     e3a:	9f 93       	push	r25
     e3c:	1f 92       	push	r1
     e3e:	8f 93       	push	r24
     e40:	8c e4       	ldi	r24, 0x4C	; 76
     e42:	94 e0       	ldi	r25, 0x04	; 4
     e44:	9f 93       	push	r25
     e46:	8f 93       	push	r24
     e48:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
				humidity_alarm = true;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <humidity_alarm>
				break;
     e52:	8d b7       	in	r24, 0x3d	; 61
     e54:	9e b7       	in	r25, 0x3e	; 62
     e56:	08 96       	adiw	r24, 0x08	; 8
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	9e bf       	out	0x3e, r25	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	8d bf       	out	0x3d, r24	; 61
     e62:	d5 c0       	rjmp	.+426    	; 0x100e <readCommands+0x2d8>

			case 'c':
			case 'C':
				printf("%02d:%02d:%02d Setting humidity alarm to OFF\n", t_hour, t_minute, t_second);
     e64:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     e68:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     e6c:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     e70:	1f 92       	push	r1
     e72:	2f 93       	push	r18
     e74:	1f 92       	push	r1
     e76:	9f 93       	push	r25
     e78:	1f 92       	push	r1
     e7a:	8f 93       	push	r24
     e7c:	89 e7       	ldi	r24, 0x79	; 121
     e7e:	94 e0       	ldi	r25, 0x04	; 4
     e80:	9f 93       	push	r25
     e82:	8f 93       	push	r24
     e84:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
				humidity_alarm = false;
     e88:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <humidity_alarm>
				break;
     e8c:	8d b7       	in	r24, 0x3d	; 61
     e8e:	9e b7       	in	r25, 0x3e	; 62
     e90:	08 96       	adiw	r24, 0x08	; 8
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	9e bf       	out	0x3e, r25	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	8d bf       	out	0x3d, r24	; 61
     e9c:	b8 c0       	rjmp	.+368    	; 0x100e <readCommands+0x2d8>

			case 'e':
			case 'E':
				eepromWipe();
     e9e:	0e 94 89 05 	call	0xb12	; 0xb12 <eepromWipe>
				break;
     ea2:	b5 c0       	rjmp	.+362    	; 0x100e <readCommands+0x2d8>

			case 'f':
			case 'F':
				triggerMidnight = true;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <triggerMidnight>
				break;
     eaa:	b1 c0       	rjmp	.+354    	; 0x100e <readCommands+0x2d8>

			case 'h':
			case 'H':
				eepromDump();
     eac:	0e 94 17 06 	call	0xc2e	; 0xc2e <eepromDump>
				break;
     eb0:	ae c0       	rjmp	.+348    	; 0x100e <readCommands+0x2d8>

			case 'm':
			case 'M':
				triggerHTU = true;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <triggerHTU>
				break;
     eb8:	aa c0       	rjmp	.+340    	; 0x100e <readCommands+0x2d8>

			case 'n':
			case 'N':
				btnNow();
     eba:	0e 94 93 03 	call	0x726	; 0x726 <btnNow>
				break;
     ebe:	a7 c0       	rjmp	.+334    	; 0x100e <readCommands+0x2d8>

			case 'r':
			case 'R':
				triggerRTC = true;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <triggerRTC>
				break;
     ec6:	a3 c0       	rjmp	.+326    	; 0x100e <readCommands+0x2d8>

			case 's':
			case 'S':
				printf("%02d:%02d:%02d Humidity alarm status: %d\n", t_hour, t_minute, t_second, humidity_alarm);
     ec8:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <humidity_alarm>
     ecc:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     ed0:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     ed4:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     ed8:	1f 92       	push	r1
     eda:	3f 93       	push	r19
     edc:	1f 92       	push	r1
     ede:	2f 93       	push	r18
     ee0:	1f 92       	push	r1
     ee2:	9f 93       	push	r25
     ee4:	1f 92       	push	r1
     ee6:	8f 93       	push	r24
     ee8:	87 ea       	ldi	r24, 0xA7	; 167
     eea:	94 e0       	ldi	r25, 0x04	; 4
     eec:	9f 93       	push	r25
     eee:	8f 93       	push	r24
     ef0:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
				break;
     ef4:	8d b7       	in	r24, 0x3d	; 61
     ef6:	9e b7       	in	r25, 0x3e	; 62
     ef8:	0a 96       	adiw	r24, 0x0a	; 10
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	9e bf       	out	0x3e, r25	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	8d bf       	out	0x3d, r24	; 61
     f04:	84 c0       	rjmp	.+264    	; 0x100e <readCommands+0x2d8>

			case 't':
			case 'T':
				printf("%02d:%02d:%02d Time: %02d:%02d:%02d\n", t_hour, t_minute, t_second, t_hour, t_minute, t_second);
     f06:	50 91 8d 06 	lds	r21, 0x068D	; 0x80068d <t_second>
     f0a:	40 91 8e 06 	lds	r20, 0x068E	; 0x80068e <t_minute>
     f0e:	30 91 8f 06 	lds	r19, 0x068F	; 0x80068f <t_hour>
     f12:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     f16:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     f1a:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     f1e:	1f 92       	push	r1
     f20:	5f 93       	push	r21
     f22:	1f 92       	push	r1
     f24:	4f 93       	push	r20
     f26:	1f 92       	push	r1
     f28:	3f 93       	push	r19
     f2a:	1f 92       	push	r1
     f2c:	2f 93       	push	r18
     f2e:	1f 92       	push	r1
     f30:	9f 93       	push	r25
     f32:	1f 92       	push	r1
     f34:	8f 93       	push	r24
     f36:	81 ed       	ldi	r24, 0xD1	; 209
     f38:	94 e0       	ldi	r25, 0x04	; 4
     f3a:	9f 93       	push	r25
     f3c:	8f 93       	push	r24
     f3e:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
				break;
     f42:	8d b7       	in	r24, 0x3d	; 61
     f44:	9e b7       	in	r25, 0x3e	; 62
     f46:	0e 96       	adiw	r24, 0x0e	; 14
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	9e bf       	out	0x3e, r25	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	8d bf       	out	0x3d, r24	; 61
     f52:	5d c0       	rjmp	.+186    	; 0x100e <readCommands+0x2d8>

			case 'w':
			case 'W':
				btnWait();
     f54:	0e 94 c0 03 	call	0x780	; 0x780 <btnWait>
				break;
     f58:	5a c0       	rjmp	.+180    	; 0x100e <readCommands+0x2d8>

			case 'z':
			case 'Z':
				printf("%02d:%02d:%02d Clearing max temperature and humidity\n", t_hour, t_minute, t_second);
     f5a:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     f5e:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     f62:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     f66:	1f 92       	push	r1
     f68:	2f 93       	push	r18
     f6a:	1f 92       	push	r1
     f6c:	9f 93       	push	r25
     f6e:	1f 92       	push	r1
     f70:	8f 93       	push	r24
     f72:	86 ef       	ldi	r24, 0xF6	; 246
     f74:	94 e0       	ldi	r25, 0x04	; 4
     f76:	9f 93       	push	r25
     f78:	8f 93       	push	r24
     f7a:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
				tempMax = 0;
     f7e:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <tempMax>
				humidityMax = 0;
     f82:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <humidityMax>
				break;
     f86:	8d b7       	in	r24, 0x3d	; 61
     f88:	9e b7       	in	r25, 0x3e	; 62
     f8a:	08 96       	adiw	r24, 0x08	; 8
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	9e bf       	out	0x3e, r25	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	8d bf       	out	0x3d, r24	; 61
     f96:	3b c0       	rjmp	.+118    	; 0x100e <readCommands+0x2d8>

			case '0':
				printf("%02d:%02d:%02d Turning pump OFF\n", t_hour, t_minute, t_second);
     f98:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     f9c:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     fa0:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     fa4:	1f 92       	push	r1
     fa6:	2f 93       	push	r18
     fa8:	1f 92       	push	r1
     faa:	9f 93       	push	r25
     fac:	1f 92       	push	r1
     fae:	8f 93       	push	r24
     fb0:	8c e2       	ldi	r24, 0x2C	; 44
     fb2:	95 e0       	ldi	r25, 0x05	; 5
     fb4:	9f 93       	push	r25
     fb6:	8f 93       	push	r24
     fb8:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
     fbc:	85 b1       	in	r24, 0x05	; 5
     fbe:	8e 7f       	andi	r24, 0xFE	; 254
     fc0:	85 b9       	out	0x05, r24	; 5
     fc2:	8d b7       	in	r24, 0x3d	; 61
     fc4:	9e b7       	in	r25, 0x3e	; 62
     fc6:	08 96       	adiw	r24, 0x08	; 8
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	9e bf       	out	0x3e, r25	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	8d bf       	out	0x3d, r24	; 61
     fd2:	1d c0       	rjmp	.+58     	; 0x100e <readCommands+0x2d8>
				RELAY_set_level(false);
				break;

			case '1':
				printf("%02d:%02d:%02d Turning pump ON\n", t_hour, t_minute, t_second);
     fd4:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
     fd8:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
     fdc:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
     fe0:	1f 92       	push	r1
     fe2:	2f 93       	push	r18
     fe4:	1f 92       	push	r1
     fe6:	9f 93       	push	r25
     fe8:	1f 92       	push	r1
     fea:	8f 93       	push	r24
     fec:	8d e4       	ldi	r24, 0x4D	; 77
     fee:	95 e0       	ldi	r25, 0x05	; 5
     ff0:	9f 93       	push	r25
     ff2:	8f 93       	push	r24
     ff4:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
     ff8:	85 b1       	in	r24, 0x05	; 5
     ffa:	81 60       	ori	r24, 0x01	; 1
     ffc:	85 b9       	out	0x05, r24	; 5
     ffe:	8d b7       	in	r24, 0x3d	; 61
    1000:	9e b7       	in	r25, 0x3e	; 62
    1002:	08 96       	adiw	r24, 0x08	; 8
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	9e bf       	out	0x3e, r25	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	8d bf       	out	0x3d, r24	; 61
}

// ---------------------------------------------- COMMANDS

void readCommands() {
	while(USART_0_is_rx_ready()) {
    100e:	0e 94 07 02 	call	0x40e	; 0x40e <USART_0_is_rx_ready>
    1012:	81 11       	cpse	r24, r1
    1014:	91 ce       	rjmp	.-734    	; 0xd38 <readCommands+0x2>
				break;


		}
	}	
}
    1016:	08 95       	ret

00001018 <main>:

// ---------------------------------------------- MAIN

int main(void) {
	
	atmel_start_init();
    1018:	0e 94 c4 00 	call	0x188	; 0x188 <atmel_start_init>
	
	sei();
    101c:	78 94       	sei
	
	printf("\nhttps://github.com/kiu/gtimer v0.2\n");
    101e:	8d e6       	ldi	r24, 0x6D	; 109
    1020:	95 e0       	ldi	r25, 0x05	; 5
    1022:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
	printf("Enter '?' for available commands...\n\n");
    1026:	81 e9       	ldi	r24, 0x91	; 145
    1028:	95 e0       	ldi	r25, 0x05	; 5
    102a:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
	
	#if WIPEEEPROM
		eepromWipe();
	#endif

	eepromInit();
    102e:	0e 94 55 05 	call	0xaaa	; 0xaaa <eepromInit>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
    1032:	88 b1       	in	r24, 0x08	; 8
    1034:	82 60       	ori	r24, 0x02	; 2
    1036:	88 b9       	out	0x08, r24	; 8
    1038:	88 b1       	in	r24, 0x08	; 8
    103a:	88 60       	ori	r24, 0x08	; 8
    103c:	88 b9       	out	0x08, r24	; 8
	BTN_NOW_LED_set_level(true);
	BTN_WAIT_LED_set_level(true);
	
	while(1) {
		
		if (triggerRTC) {
    103e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <triggerRTC>
    1042:	88 23       	and	r24, r24
    1044:	21 f0       	breq	.+8      	; 0x104e <main+0x36>
			triggerRTC = false;
    1046:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <triggerRTC>
			
			syncRTC();
    104a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <syncRTC>
		}
		
		if (triggerHTU) {
    104e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <triggerHTU>
    1052:	88 23       	and	r24, r24
    1054:	09 f4       	brne	.+2      	; 0x1058 <main+0x40>
    1056:	4f c0       	rjmp	.+158    	; 0x10f6 <main+0xde>
			triggerHTU = false;
    1058:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <triggerHTU>

			uint8_t tvalue = readTemperature();
    105c:	0e 94 57 04 	call	0x8ae	; 0x8ae <readTemperature>
    1060:	ec 01       	movw	r28, r24
			if (tvalue > tempMax) {
    1062:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <tempMax>
    1066:	8c 17       	cp	r24, r28
    1068:	10 f4       	brcc	.+4      	; 0x106e <main+0x56>
				tempMax = tvalue;
    106a:	c0 93 97 06 	sts	0x0697, r28	; 0x800697 <tempMax>
			}			

			uint8_t hvalue = readHumidity();
    106e:	0e 94 8c 04 	call	0x918	; 0x918 <readHumidity>
    1072:	18 2f       	mov	r17, r24
			if (hvalue > humidityMax) {
    1074:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <humidityMax>
    1078:	81 17       	cp	r24, r17
    107a:	10 f4       	brcc	.+4      	; 0x1080 <main+0x68>
				humidityMax = hvalue;
    107c:	10 93 95 06 	sts	0x0695, r17	; 0x800695 <humidityMax>
			}
			
			printf("%02d:%02d:%02d M: %02dC (%02dC / %02dC) %02d%% (%02d%% / %02d%%)\n", t_hour, t_minute, t_second, tvalue, tempMax, tempMaxLast, hvalue, humidityMax, humidityMaxLast);
    1080:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
    1084:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
    1088:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
    108c:	30 91 94 06 	lds	r19, 0x0694	; 0x800694 <humidityMaxLast>
    1090:	1f 92       	push	r1
    1092:	3f 93       	push	r19
    1094:	30 91 95 06 	lds	r19, 0x0695	; 0x800695 <humidityMax>
    1098:	1f 92       	push	r1
    109a:	3f 93       	push	r19
    109c:	1f 92       	push	r1
    109e:	1f 93       	push	r17
    10a0:	30 91 96 06 	lds	r19, 0x0696	; 0x800696 <tempMaxLast>
    10a4:	1f 92       	push	r1
    10a6:	3f 93       	push	r19
    10a8:	30 91 97 06 	lds	r19, 0x0697	; 0x800697 <tempMax>
    10ac:	1f 92       	push	r1
    10ae:	3f 93       	push	r19
    10b0:	dd 27       	eor	r29, r29
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	1f 92       	push	r1
    10b8:	2f 93       	push	r18
    10ba:	1f 92       	push	r1
    10bc:	9f 93       	push	r25
    10be:	1f 92       	push	r1
    10c0:	8f 93       	push	r24
    10c2:	86 eb       	ldi	r24, 0xB6	; 182
    10c4:	95 e0       	ldi	r25, 0x05	; 5
    10c6:	9f 93       	push	r25
    10c8:	8f 93       	push	r24
    10ca:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
			
			if (hvalue > HUMIDITY_ALARM_THRESHOLD) {
    10ce:	8d b7       	in	r24, 0x3d	; 61
    10d0:	9e b7       	in	r25, 0x3e	; 62
    10d2:	44 96       	adiw	r24, 0x14	; 20
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	9e bf       	out	0x3e, r25	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	8d bf       	out	0x3d, r24	; 61
    10de:	1b 35       	cpi	r17, 0x5B	; 91
    10e0:	50 f0       	brcs	.+20     	; 0x10f6 <main+0xde>
				humidity_alarm = true;				
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <humidity_alarm>
				pump_mode_next = STOP;
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pump_mode_next>
				printf("\n*** HUMIDITY ALARM ***\n");
    10ee:	88 ef       	ldi	r24, 0xF8	; 248
    10f0:	95 e0       	ldi	r25, 0x05	; 5
    10f2:	0e 94 4f 0b 	call	0x169e	; 0x169e <puts>
			}
		}
		
		if (triggerMidnight) {
    10f6:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <triggerMidnight>
    10fa:	88 23       	and	r24, r24
    10fc:	89 f1       	breq	.+98     	; 0x1160 <main+0x148>
			triggerMidnight = false;
    10fe:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <triggerMidnight>

			printf("%02d:%02d:%02d Midnight\n", t_hour, t_minute, t_second);
    1102:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
    1106:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
    110a:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
    110e:	1f 92       	push	r1
    1110:	2f 93       	push	r18
    1112:	1f 92       	push	r1
    1114:	9f 93       	push	r25
    1116:	1f 92       	push	r1
    1118:	8f 93       	push	r24
    111a:	80 e1       	ldi	r24, 0x10	; 16
    111c:	96 e0       	ldi	r25, 0x06	; 6
    111e:	9f 93       	push	r25
    1120:	8f 93       	push	r24
    1122:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
			
			tempMaxLast = tempMax;
    1126:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <tempMax>
    112a:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <tempMaxLast>
			tempMax = 0;
    112e:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <tempMax>
			
			humidityMaxLast = humidityMax;
    1132:	60 91 95 06 	lds	r22, 0x0695	; 0x800695 <humidityMax>
    1136:	60 93 94 06 	sts	0x0694, r22	; 0x800694 <humidityMaxLast>
			humidityMax = 0;
    113a:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <humidityMax>
			
			if (pump_mode == WAIT) {
    113e:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <pump_mode>
    1142:	2d b7       	in	r18, 0x3d	; 61
    1144:	3e b7       	in	r19, 0x3e	; 62
    1146:	28 5f       	subi	r18, 0xF8	; 248
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	3e bf       	out	0x3e, r19	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	2d bf       	out	0x3d, r18	; 61
    1154:	94 30       	cpi	r25, 0x04	; 4
    1156:	11 f4       	brne	.+4      	; 0x115c <main+0x144>
				pump_mode_next = IDLE;
    1158:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <pump_mode_next>
			}
			
			eepromUpdate(tempMaxLast, humidityMaxLast);
    115c:	0e 94 c4 05 	call	0xb88	; 0xb88 <eepromUpdate>
 *
 * \param[in] pin       The pin number for device
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return PINC & (1 << pin);
    1160:	86 b1       	in	r24, 0x06	; 6
    1162:	98 2f       	mov	r25, r24
    1164:	91 70       	andi	r25, 0x01	; 1
		}
		
		btn_now_debounce = (btn_now_debounce << 1) + BTN_NOW_get_level();
    1166:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <btn_now_debounce>
    116a:	88 0f       	add	r24, r24
    116c:	89 0f       	add	r24, r25
    116e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <btn_now_debounce>
		if (btn_now_state && btn_now_debounce == 0x00) {
    1172:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <btn_now_state>
    1176:	99 23       	and	r25, r25
    1178:	31 f0       	breq	.+12     	; 0x1186 <main+0x16e>
    117a:	81 11       	cpse	r24, r1
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <main+0x16e>
			btn_now_state = false;
    117e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <btn_now_state>
			btnNow();
    1182:	0e 94 93 03 	call	0x726	; 0x726 <btnNow>
		}
		if (!btn_now_state && btn_now_debounce == 0xFF) {
    1186:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <btn_now_state>
    118a:	81 11       	cpse	r24, r1
    118c:	07 c0       	rjmp	.+14     	; 0x119c <main+0x184>
    118e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <btn_now_debounce>
    1192:	8f 3f       	cpi	r24, 0xFF	; 255
    1194:	19 f4       	brne	.+6      	; 0x119c <main+0x184>
			btn_now_state = true;			
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <btn_now_state>
    119c:	86 b1       	in	r24, 0x06	; 6
    119e:	82 fb       	bst	r24, 2
    11a0:	99 27       	eor	r25, r25
    11a2:	90 f9       	bld	r25, 0
		}

		btn_wait_debounce = (btn_wait_debounce << 1) + BTN_WAIT_get_level();
    11a4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <btn_wait_debounce>
    11a8:	88 0f       	add	r24, r24
    11aa:	89 0f       	add	r24, r25
    11ac:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <btn_wait_debounce>
		if (btn_wait_state && btn_wait_debounce == 0x00) {
    11b0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <btn_wait_state>
    11b4:	99 23       	and	r25, r25
    11b6:	31 f0       	breq	.+12     	; 0x11c4 <main+0x1ac>
    11b8:	81 11       	cpse	r24, r1
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <main+0x1ac>
			btn_wait_state = false;
    11bc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <btn_wait_state>
			btnWait();
    11c0:	0e 94 c0 03 	call	0x780	; 0x780 <btnWait>
		}
		if (!btn_wait_state && btn_wait_debounce == 0xFF) {
    11c4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <btn_wait_state>
    11c8:	81 11       	cpse	r24, r1
    11ca:	07 c0       	rjmp	.+14     	; 0x11da <main+0x1c2>
    11cc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <btn_wait_debounce>
    11d0:	8f 3f       	cpi	r24, 0xFF	; 255
    11d2:	19 f4       	brne	.+6      	; 0x11da <main+0x1c2>
			btn_wait_state = true;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <btn_wait_state>
		}
		
		if (pump_mode != pump_mode_next) {
    11da:	e0 91 99 06 	lds	r30, 0x0699	; 0x800699 <pump_mode>
    11de:	a0 91 98 06 	lds	r26, 0x0698	; 0x800698 <pump_mode_next>
    11e2:	ea 17       	cp	r30, r26
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <main+0x1d0>
    11e6:	6c c0       	rjmp	.+216    	; 0x12c0 <main+0x2a8>
			printf("%02d:%02d:%02d Pump mode change from %s to %s\n", t_hour, t_minute, t_second, pump_mode_names[pump_mode], pump_mode_names[pump_mode_next]);
    11e8:	20 91 8d 06 	lds	r18, 0x068D	; 0x80068d <t_second>
    11ec:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <t_minute>
    11f0:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <t_hour>
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	aa 0f       	add	r26, r26
    11f8:	bb 1f       	adc	r27, r27
    11fa:	a8 5e       	subi	r26, 0xE8	; 232
    11fc:	be 4f       	sbci	r27, 0xFE	; 254
    11fe:	11 96       	adiw	r26, 0x01	; 1
    1200:	3c 91       	ld	r19, X
    1202:	11 97       	sbiw	r26, 0x01	; 1
    1204:	3f 93       	push	r19
    1206:	3c 91       	ld	r19, X
    1208:	3f 93       	push	r19
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	e8 5e       	subi	r30, 0xE8	; 232
    1212:	fe 4f       	sbci	r31, 0xFE	; 254
    1214:	31 81       	ldd	r19, Z+1	; 0x01
    1216:	3f 93       	push	r19
    1218:	30 81       	ld	r19, Z
    121a:	3f 93       	push	r19
    121c:	1f 92       	push	r1
    121e:	2f 93       	push	r18
    1220:	1f 92       	push	r1
    1222:	9f 93       	push	r25
    1224:	1f 92       	push	r1
    1226:	8f 93       	push	r24
    1228:	89 e2       	ldi	r24, 0x29	; 41
    122a:	96 e0       	ldi	r25, 0x06	; 6
    122c:	9f 93       	push	r25
    122e:	8f 93       	push	r24
    1230:	0e 94 32 0b 	call	0x1664	; 0x1664 <printf>
			pump_mode = pump_mode_next;
    1234:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <pump_mode_next>
    1238:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <pump_mode>
			
			switch (pump_mode) {
    123c:	2d b7       	in	r18, 0x3d	; 61
    123e:	3e b7       	in	r19, 0x3e	; 62
    1240:	24 5f       	subi	r18, 0xF4	; 244
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	3e bf       	out	0x3e, r19	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	2d bf       	out	0x3d, r18	; 61
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	21 f1       	breq	.+72     	; 0x129a <main+0x282>
    1252:	28 f4       	brcc	.+10     	; 0x125e <main+0x246>
    1254:	88 23       	and	r24, r24
    1256:	41 f0       	breq	.+16     	; 0x1268 <main+0x250>
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	69 f0       	breq	.+26     	; 0x1276 <main+0x25e>
    125c:	31 c0       	rjmp	.+98     	; 0x12c0 <main+0x2a8>
    125e:	84 30       	cpi	r24, 0x04	; 4
    1260:	11 f1       	breq	.+68     	; 0x12a6 <main+0x28e>
    1262:	85 30       	cpi	r24, 0x05	; 5
    1264:	39 f1       	breq	.+78     	; 0x12b4 <main+0x29c>
    1266:	2c c0       	rjmp	.+88     	; 0x12c0 <main+0x2a8>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
    1268:	88 b1       	in	r24, 0x08	; 8
    126a:	82 60       	ori	r24, 0x02	; 2
    126c:	88 b9       	out	0x08, r24	; 8
    126e:	88 b1       	in	r24, 0x08	; 8
    1270:	88 60       	ori	r24, 0x08	; 8
    1272:	88 b9       	out	0x08, r24	; 8
    1274:	25 c0       	rjmp	.+74     	; 0x12c0 <main+0x2a8>
				case IDLE:
					BTN_NOW_LED_set_level(true);
					BTN_WAIT_LED_set_level(true);
					break;
				case START:
					RELAY_set_level(true & !humidity_alarm);
    1276:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <humidity_alarm>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
    127a:	81 11       	cpse	r24, r1
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <main+0x26e>
		PORTB |= 1 << pin;
    127e:	85 b1       	in	r24, 0x05	; 5
    1280:	81 60       	ori	r24, 0x01	; 1
    1282:	85 b9       	out	0x05, r24	; 5
    1284:	03 c0       	rjmp	.+6      	; 0x128c <main+0x274>
	} else {
		PORTB &= ~(1 << pin);
    1286:	85 b1       	in	r24, 0x05	; 5
    1288:	8e 7f       	andi	r24, 0xFE	; 254
    128a:	85 b9       	out	0x05, r24	; 5
					pump_remaining = PUMP_LENGTH;
    128c:	8c e3       	ldi	r24, 0x3C	; 60
    128e:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <pump_remaining>
					pump_mode_next = RUN;
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pump_mode_next>
					break;
    1298:	13 c0       	rjmp	.+38     	; 0x12c0 <main+0x2a8>
    129a:	85 b1       	in	r24, 0x05	; 5
    129c:	8e 7f       	andi	r24, 0xFE	; 254
    129e:	85 b9       	out	0x05, r24	; 5
				case RUN:
					break;
				case STOP:
					RELAY_set_level(false);
					pump_mode_next = IDLE;
    12a0:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <pump_mode_next>
					break;
    12a4:	0d c0       	rjmp	.+26     	; 0x12c0 <main+0x2a8>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
    12a6:	88 b1       	in	r24, 0x08	; 8
    12a8:	82 60       	ori	r24, 0x02	; 2
    12aa:	88 b9       	out	0x08, r24	; 8
    12ac:	88 b1       	in	r24, 0x08	; 8
    12ae:	88 60       	ori	r24, 0x08	; 8
    12b0:	88 b9       	out	0x08, r24	; 8
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <main+0x2a8>
    12b4:	88 b1       	in	r24, 0x08	; 8
    12b6:	82 60       	ori	r24, 0x02	; 2
    12b8:	88 b9       	out	0x08, r24	; 8
    12ba:	88 b1       	in	r24, 0x08	; 8
    12bc:	88 60       	ori	r24, 0x08	; 8
    12be:	88 b9       	out	0x08, r24	; 8
					BTN_WAIT_LED_set_level(true);
				break;
			}			
		}
			
		if (USART_0_is_rx_ready()) {
    12c0:	0e 94 07 02 	call	0x40e	; 0x40e <USART_0_is_rx_ready>
    12c4:	81 11       	cpse	r24, r1
			readCommands();
    12c6:	0e 94 9b 06 	call	0xd36	; 0xd36 <readCommands>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ca:	8f e1       	ldi	r24, 0x1F	; 31
    12cc:	9e e4       	ldi	r25, 0x4E	; 78
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <main+0x2b6>
    12d2:	00 c0       	rjmp	.+0      	; 0x12d4 <main+0x2bc>
    12d4:	00 00       	nop
    12d6:	b3 ce       	rjmp	.-666    	; 0x103e <main+0x26>

000012d8 <__subsf3>:
    12d8:	50 58       	subi	r21, 0x80	; 128

000012da <__addsf3>:
    12da:	bb 27       	eor	r27, r27
    12dc:	aa 27       	eor	r26, r26
    12de:	0e 94 84 09 	call	0x1308	; 0x1308 <__addsf3x>
    12e2:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__fp_round>
    12e6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__fp_pscA>
    12ea:	38 f0       	brcs	.+14     	; 0x12fa <__addsf3+0x20>
    12ec:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__fp_pscB>
    12f0:	20 f0       	brcs	.+8      	; 0x12fa <__addsf3+0x20>
    12f2:	39 f4       	brne	.+14     	; 0x1302 <__addsf3+0x28>
    12f4:	9f 3f       	cpi	r25, 0xFF	; 255
    12f6:	19 f4       	brne	.+6      	; 0x12fe <__addsf3+0x24>
    12f8:	26 f4       	brtc	.+8      	; 0x1302 <__addsf3+0x28>
    12fa:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_nan>
    12fe:	0e f4       	brtc	.+2      	; 0x1302 <__addsf3+0x28>
    1300:	e0 95       	com	r30
    1302:	e7 fb       	bst	r30, 7
    1304:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__fp_inf>

00001308 <__addsf3x>:
    1308:	e9 2f       	mov	r30, r25
    130a:	0e 94 96 0a 	call	0x152c	; 0x152c <__fp_split3>
    130e:	58 f3       	brcs	.-42     	; 0x12e6 <__addsf3+0xc>
    1310:	ba 17       	cp	r27, r26
    1312:	62 07       	cpc	r22, r18
    1314:	73 07       	cpc	r23, r19
    1316:	84 07       	cpc	r24, r20
    1318:	95 07       	cpc	r25, r21
    131a:	20 f0       	brcs	.+8      	; 0x1324 <__addsf3x+0x1c>
    131c:	79 f4       	brne	.+30     	; 0x133c <__addsf3x+0x34>
    131e:	a6 f5       	brtc	.+104    	; 0x1388 <__addsf3x+0x80>
    1320:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__fp_zero>
    1324:	0e f4       	brtc	.+2      	; 0x1328 <__addsf3x+0x20>
    1326:	e0 95       	com	r30
    1328:	0b 2e       	mov	r0, r27
    132a:	ba 2f       	mov	r27, r26
    132c:	a0 2d       	mov	r26, r0
    132e:	0b 01       	movw	r0, r22
    1330:	b9 01       	movw	r22, r18
    1332:	90 01       	movw	r18, r0
    1334:	0c 01       	movw	r0, r24
    1336:	ca 01       	movw	r24, r20
    1338:	a0 01       	movw	r20, r0
    133a:	11 24       	eor	r1, r1
    133c:	ff 27       	eor	r31, r31
    133e:	59 1b       	sub	r21, r25
    1340:	99 f0       	breq	.+38     	; 0x1368 <__addsf3x+0x60>
    1342:	59 3f       	cpi	r21, 0xF9	; 249
    1344:	50 f4       	brcc	.+20     	; 0x135a <__addsf3x+0x52>
    1346:	50 3e       	cpi	r21, 0xE0	; 224
    1348:	68 f1       	brcs	.+90     	; 0x13a4 <__addsf3x+0x9c>
    134a:	1a 16       	cp	r1, r26
    134c:	f0 40       	sbci	r31, 0x00	; 0
    134e:	a2 2f       	mov	r26, r18
    1350:	23 2f       	mov	r18, r19
    1352:	34 2f       	mov	r19, r20
    1354:	44 27       	eor	r20, r20
    1356:	58 5f       	subi	r21, 0xF8	; 248
    1358:	f3 cf       	rjmp	.-26     	; 0x1340 <__addsf3x+0x38>
    135a:	46 95       	lsr	r20
    135c:	37 95       	ror	r19
    135e:	27 95       	ror	r18
    1360:	a7 95       	ror	r26
    1362:	f0 40       	sbci	r31, 0x00	; 0
    1364:	53 95       	inc	r21
    1366:	c9 f7       	brne	.-14     	; 0x135a <__addsf3x+0x52>
    1368:	7e f4       	brtc	.+30     	; 0x1388 <__addsf3x+0x80>
    136a:	1f 16       	cp	r1, r31
    136c:	ba 0b       	sbc	r27, r26
    136e:	62 0b       	sbc	r22, r18
    1370:	73 0b       	sbc	r23, r19
    1372:	84 0b       	sbc	r24, r20
    1374:	ba f0       	brmi	.+46     	; 0x13a4 <__addsf3x+0x9c>
    1376:	91 50       	subi	r25, 0x01	; 1
    1378:	a1 f0       	breq	.+40     	; 0x13a2 <__addsf3x+0x9a>
    137a:	ff 0f       	add	r31, r31
    137c:	bb 1f       	adc	r27, r27
    137e:	66 1f       	adc	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	88 1f       	adc	r24, r24
    1384:	c2 f7       	brpl	.-16     	; 0x1376 <__addsf3x+0x6e>
    1386:	0e c0       	rjmp	.+28     	; 0x13a4 <__addsf3x+0x9c>
    1388:	ba 0f       	add	r27, r26
    138a:	62 1f       	adc	r22, r18
    138c:	73 1f       	adc	r23, r19
    138e:	84 1f       	adc	r24, r20
    1390:	48 f4       	brcc	.+18     	; 0x13a4 <__addsf3x+0x9c>
    1392:	87 95       	ror	r24
    1394:	77 95       	ror	r23
    1396:	67 95       	ror	r22
    1398:	b7 95       	ror	r27
    139a:	f7 95       	ror	r31
    139c:	9e 3f       	cpi	r25, 0xFE	; 254
    139e:	08 f0       	brcs	.+2      	; 0x13a2 <__addsf3x+0x9a>
    13a0:	b0 cf       	rjmp	.-160    	; 0x1302 <__addsf3+0x28>
    13a2:	93 95       	inc	r25
    13a4:	88 0f       	add	r24, r24
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <__addsf3x+0xa2>
    13a8:	99 27       	eor	r25, r25
    13aa:	ee 0f       	add	r30, r30
    13ac:	97 95       	ror	r25
    13ae:	87 95       	ror	r24
    13b0:	08 95       	ret

000013b2 <__cmpsf2>:
    13b2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fp_cmp>
    13b6:	08 f4       	brcc	.+2      	; 0x13ba <__cmpsf2+0x8>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	08 95       	ret

000013bc <__fixunssfsi>:
    13bc:	0e 94 9e 0a 	call	0x153c	; 0x153c <__fp_splitA>
    13c0:	88 f0       	brcs	.+34     	; 0x13e4 <__fixunssfsi+0x28>
    13c2:	9f 57       	subi	r25, 0x7F	; 127
    13c4:	98 f0       	brcs	.+38     	; 0x13ec <__fixunssfsi+0x30>
    13c6:	b9 2f       	mov	r27, r25
    13c8:	99 27       	eor	r25, r25
    13ca:	b7 51       	subi	r27, 0x17	; 23
    13cc:	b0 f0       	brcs	.+44     	; 0x13fa <__fixunssfsi+0x3e>
    13ce:	e1 f0       	breq	.+56     	; 0x1408 <__fixunssfsi+0x4c>
    13d0:	66 0f       	add	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	1a f0       	brmi	.+6      	; 0x13e0 <__fixunssfsi+0x24>
    13da:	ba 95       	dec	r27
    13dc:	c9 f7       	brne	.-14     	; 0x13d0 <__fixunssfsi+0x14>
    13de:	14 c0       	rjmp	.+40     	; 0x1408 <__fixunssfsi+0x4c>
    13e0:	b1 30       	cpi	r27, 0x01	; 1
    13e2:	91 f0       	breq	.+36     	; 0x1408 <__fixunssfsi+0x4c>
    13e4:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__fp_zero>
    13e8:	b1 e0       	ldi	r27, 0x01	; 1
    13ea:	08 95       	ret
    13ec:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__fp_zero>
    13f0:	67 2f       	mov	r22, r23
    13f2:	78 2f       	mov	r23, r24
    13f4:	88 27       	eor	r24, r24
    13f6:	b8 5f       	subi	r27, 0xF8	; 248
    13f8:	39 f0       	breq	.+14     	; 0x1408 <__fixunssfsi+0x4c>
    13fa:	b9 3f       	cpi	r27, 0xF9	; 249
    13fc:	cc f3       	brlt	.-14     	; 0x13f0 <__fixunssfsi+0x34>
    13fe:	86 95       	lsr	r24
    1400:	77 95       	ror	r23
    1402:	67 95       	ror	r22
    1404:	b3 95       	inc	r27
    1406:	d9 f7       	brne	.-10     	; 0x13fe <__fixunssfsi+0x42>
    1408:	3e f4       	brtc	.+14     	; 0x1418 <__fixunssfsi+0x5c>
    140a:	90 95       	com	r25
    140c:	80 95       	com	r24
    140e:	70 95       	com	r23
    1410:	61 95       	neg	r22
    1412:	7f 4f       	sbci	r23, 0xFF	; 255
    1414:	8f 4f       	sbci	r24, 0xFF	; 255
    1416:	9f 4f       	sbci	r25, 0xFF	; 255
    1418:	08 95       	ret

0000141a <__floatunsisf>:
    141a:	e8 94       	clt
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <__floatsisf+0x12>

0000141e <__floatsisf>:
    141e:	97 fb       	bst	r25, 7
    1420:	3e f4       	brtc	.+14     	; 0x1430 <__floatsisf+0x12>
    1422:	90 95       	com	r25
    1424:	80 95       	com	r24
    1426:	70 95       	com	r23
    1428:	61 95       	neg	r22
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	8f 4f       	sbci	r24, 0xFF	; 255
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	99 23       	and	r25, r25
    1432:	a9 f0       	breq	.+42     	; 0x145e <__floatsisf+0x40>
    1434:	f9 2f       	mov	r31, r25
    1436:	96 e9       	ldi	r25, 0x96	; 150
    1438:	bb 27       	eor	r27, r27
    143a:	93 95       	inc	r25
    143c:	f6 95       	lsr	r31
    143e:	87 95       	ror	r24
    1440:	77 95       	ror	r23
    1442:	67 95       	ror	r22
    1444:	b7 95       	ror	r27
    1446:	f1 11       	cpse	r31, r1
    1448:	f8 cf       	rjmp	.-16     	; 0x143a <__floatsisf+0x1c>
    144a:	fa f4       	brpl	.+62     	; 0x148a <__floatsisf+0x6c>
    144c:	bb 0f       	add	r27, r27
    144e:	11 f4       	brne	.+4      	; 0x1454 <__floatsisf+0x36>
    1450:	60 ff       	sbrs	r22, 0
    1452:	1b c0       	rjmp	.+54     	; 0x148a <__floatsisf+0x6c>
    1454:	6f 5f       	subi	r22, 0xFF	; 255
    1456:	7f 4f       	sbci	r23, 0xFF	; 255
    1458:	8f 4f       	sbci	r24, 0xFF	; 255
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	16 c0       	rjmp	.+44     	; 0x148a <__floatsisf+0x6c>
    145e:	88 23       	and	r24, r24
    1460:	11 f0       	breq	.+4      	; 0x1466 <__floatsisf+0x48>
    1462:	96 e9       	ldi	r25, 0x96	; 150
    1464:	11 c0       	rjmp	.+34     	; 0x1488 <__floatsisf+0x6a>
    1466:	77 23       	and	r23, r23
    1468:	21 f0       	breq	.+8      	; 0x1472 <__floatsisf+0x54>
    146a:	9e e8       	ldi	r25, 0x8E	; 142
    146c:	87 2f       	mov	r24, r23
    146e:	76 2f       	mov	r23, r22
    1470:	05 c0       	rjmp	.+10     	; 0x147c <__floatsisf+0x5e>
    1472:	66 23       	and	r22, r22
    1474:	71 f0       	breq	.+28     	; 0x1492 <__floatsisf+0x74>
    1476:	96 e8       	ldi	r25, 0x86	; 134
    1478:	86 2f       	mov	r24, r22
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	2a f0       	brmi	.+10     	; 0x148a <__floatsisf+0x6c>
    1480:	9a 95       	dec	r25
    1482:	66 0f       	add	r22, r22
    1484:	77 1f       	adc	r23, r23
    1486:	88 1f       	adc	r24, r24
    1488:	da f7       	brpl	.-10     	; 0x1480 <__floatsisf+0x62>
    148a:	88 0f       	add	r24, r24
    148c:	96 95       	lsr	r25
    148e:	87 95       	ror	r24
    1490:	97 f9       	bld	r25, 7
    1492:	08 95       	ret

00001494 <__fp_cmp>:
    1494:	99 0f       	add	r25, r25
    1496:	00 08       	sbc	r0, r0
    1498:	55 0f       	add	r21, r21
    149a:	aa 0b       	sbc	r26, r26
    149c:	e0 e8       	ldi	r30, 0x80	; 128
    149e:	fe ef       	ldi	r31, 0xFE	; 254
    14a0:	16 16       	cp	r1, r22
    14a2:	17 06       	cpc	r1, r23
    14a4:	e8 07       	cpc	r30, r24
    14a6:	f9 07       	cpc	r31, r25
    14a8:	c0 f0       	brcs	.+48     	; 0x14da <__fp_cmp+0x46>
    14aa:	12 16       	cp	r1, r18
    14ac:	13 06       	cpc	r1, r19
    14ae:	e4 07       	cpc	r30, r20
    14b0:	f5 07       	cpc	r31, r21
    14b2:	98 f0       	brcs	.+38     	; 0x14da <__fp_cmp+0x46>
    14b4:	62 1b       	sub	r22, r18
    14b6:	73 0b       	sbc	r23, r19
    14b8:	84 0b       	sbc	r24, r20
    14ba:	95 0b       	sbc	r25, r21
    14bc:	39 f4       	brne	.+14     	; 0x14cc <__fp_cmp+0x38>
    14be:	0a 26       	eor	r0, r26
    14c0:	61 f0       	breq	.+24     	; 0x14da <__fp_cmp+0x46>
    14c2:	23 2b       	or	r18, r19
    14c4:	24 2b       	or	r18, r20
    14c6:	25 2b       	or	r18, r21
    14c8:	21 f4       	brne	.+8      	; 0x14d2 <__fp_cmp+0x3e>
    14ca:	08 95       	ret
    14cc:	0a 26       	eor	r0, r26
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <__fp_cmp+0x3e>
    14d0:	a1 40       	sbci	r26, 0x01	; 1
    14d2:	a6 95       	lsr	r26
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	81 1d       	adc	r24, r1
    14d8:	81 1d       	adc	r24, r1
    14da:	08 95       	ret

000014dc <__fp_inf>:
    14dc:	97 f9       	bld	r25, 7
    14de:	9f 67       	ori	r25, 0x7F	; 127
    14e0:	80 e8       	ldi	r24, 0x80	; 128
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	08 95       	ret

000014e8 <__fp_nan>:
    14e8:	9f ef       	ldi	r25, 0xFF	; 255
    14ea:	80 ec       	ldi	r24, 0xC0	; 192
    14ec:	08 95       	ret

000014ee <__fp_pscA>:
    14ee:	00 24       	eor	r0, r0
    14f0:	0a 94       	dec	r0
    14f2:	16 16       	cp	r1, r22
    14f4:	17 06       	cpc	r1, r23
    14f6:	18 06       	cpc	r1, r24
    14f8:	09 06       	cpc	r0, r25
    14fa:	08 95       	ret

000014fc <__fp_pscB>:
    14fc:	00 24       	eor	r0, r0
    14fe:	0a 94       	dec	r0
    1500:	12 16       	cp	r1, r18
    1502:	13 06       	cpc	r1, r19
    1504:	14 06       	cpc	r1, r20
    1506:	05 06       	cpc	r0, r21
    1508:	08 95       	ret

0000150a <__fp_round>:
    150a:	09 2e       	mov	r0, r25
    150c:	03 94       	inc	r0
    150e:	00 0c       	add	r0, r0
    1510:	11 f4       	brne	.+4      	; 0x1516 <__fp_round+0xc>
    1512:	88 23       	and	r24, r24
    1514:	52 f0       	brmi	.+20     	; 0x152a <__fp_round+0x20>
    1516:	bb 0f       	add	r27, r27
    1518:	40 f4       	brcc	.+16     	; 0x152a <__fp_round+0x20>
    151a:	bf 2b       	or	r27, r31
    151c:	11 f4       	brne	.+4      	; 0x1522 <__fp_round+0x18>
    151e:	60 ff       	sbrs	r22, 0
    1520:	04 c0       	rjmp	.+8      	; 0x152a <__fp_round+0x20>
    1522:	6f 5f       	subi	r22, 0xFF	; 255
    1524:	7f 4f       	sbci	r23, 0xFF	; 255
    1526:	8f 4f       	sbci	r24, 0xFF	; 255
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	08 95       	ret

0000152c <__fp_split3>:
    152c:	57 fd       	sbrc	r21, 7
    152e:	90 58       	subi	r25, 0x80	; 128
    1530:	44 0f       	add	r20, r20
    1532:	55 1f       	adc	r21, r21
    1534:	59 f0       	breq	.+22     	; 0x154c <__fp_splitA+0x10>
    1536:	5f 3f       	cpi	r21, 0xFF	; 255
    1538:	71 f0       	breq	.+28     	; 0x1556 <__fp_splitA+0x1a>
    153a:	47 95       	ror	r20

0000153c <__fp_splitA>:
    153c:	88 0f       	add	r24, r24
    153e:	97 fb       	bst	r25, 7
    1540:	99 1f       	adc	r25, r25
    1542:	61 f0       	breq	.+24     	; 0x155c <__fp_splitA+0x20>
    1544:	9f 3f       	cpi	r25, 0xFF	; 255
    1546:	79 f0       	breq	.+30     	; 0x1566 <__fp_splitA+0x2a>
    1548:	87 95       	ror	r24
    154a:	08 95       	ret
    154c:	12 16       	cp	r1, r18
    154e:	13 06       	cpc	r1, r19
    1550:	14 06       	cpc	r1, r20
    1552:	55 1f       	adc	r21, r21
    1554:	f2 cf       	rjmp	.-28     	; 0x153a <__fp_split3+0xe>
    1556:	46 95       	lsr	r20
    1558:	f1 df       	rcall	.-30     	; 0x153c <__fp_splitA>
    155a:	08 c0       	rjmp	.+16     	; 0x156c <__fp_splitA+0x30>
    155c:	16 16       	cp	r1, r22
    155e:	17 06       	cpc	r1, r23
    1560:	18 06       	cpc	r1, r24
    1562:	99 1f       	adc	r25, r25
    1564:	f1 cf       	rjmp	.-30     	; 0x1548 <__fp_splitA+0xc>
    1566:	86 95       	lsr	r24
    1568:	71 05       	cpc	r23, r1
    156a:	61 05       	cpc	r22, r1
    156c:	08 94       	sec
    156e:	08 95       	ret

00001570 <__fp_zero>:
    1570:	e8 94       	clt

00001572 <__fp_szero>:
    1572:	bb 27       	eor	r27, r27
    1574:	66 27       	eor	r22, r22
    1576:	77 27       	eor	r23, r23
    1578:	cb 01       	movw	r24, r22
    157a:	97 f9       	bld	r25, 7
    157c:	08 95       	ret

0000157e <__mulsf3>:
    157e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__mulsf3x>
    1582:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__fp_round>
    1586:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__fp_pscA>
    158a:	38 f0       	brcs	.+14     	; 0x159a <__mulsf3+0x1c>
    158c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__fp_pscB>
    1590:	20 f0       	brcs	.+8      	; 0x159a <__mulsf3+0x1c>
    1592:	95 23       	and	r25, r21
    1594:	11 f0       	breq	.+4      	; 0x159a <__mulsf3+0x1c>
    1596:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__fp_inf>
    159a:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_nan>
    159e:	11 24       	eor	r1, r1
    15a0:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__fp_szero>

000015a4 <__mulsf3x>:
    15a4:	0e 94 96 0a 	call	0x152c	; 0x152c <__fp_split3>
    15a8:	70 f3       	brcs	.-36     	; 0x1586 <__mulsf3+0x8>

000015aa <__mulsf3_pse>:
    15aa:	95 9f       	mul	r25, r21
    15ac:	c1 f3       	breq	.-16     	; 0x159e <__mulsf3+0x20>
    15ae:	95 0f       	add	r25, r21
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	55 1f       	adc	r21, r21
    15b4:	62 9f       	mul	r22, r18
    15b6:	f0 01       	movw	r30, r0
    15b8:	72 9f       	mul	r23, r18
    15ba:	bb 27       	eor	r27, r27
    15bc:	f0 0d       	add	r31, r0
    15be:	b1 1d       	adc	r27, r1
    15c0:	63 9f       	mul	r22, r19
    15c2:	aa 27       	eor	r26, r26
    15c4:	f0 0d       	add	r31, r0
    15c6:	b1 1d       	adc	r27, r1
    15c8:	aa 1f       	adc	r26, r26
    15ca:	64 9f       	mul	r22, r20
    15cc:	66 27       	eor	r22, r22
    15ce:	b0 0d       	add	r27, r0
    15d0:	a1 1d       	adc	r26, r1
    15d2:	66 1f       	adc	r22, r22
    15d4:	82 9f       	mul	r24, r18
    15d6:	22 27       	eor	r18, r18
    15d8:	b0 0d       	add	r27, r0
    15da:	a1 1d       	adc	r26, r1
    15dc:	62 1f       	adc	r22, r18
    15de:	73 9f       	mul	r23, r19
    15e0:	b0 0d       	add	r27, r0
    15e2:	a1 1d       	adc	r26, r1
    15e4:	62 1f       	adc	r22, r18
    15e6:	83 9f       	mul	r24, r19
    15e8:	a0 0d       	add	r26, r0
    15ea:	61 1d       	adc	r22, r1
    15ec:	22 1f       	adc	r18, r18
    15ee:	74 9f       	mul	r23, r20
    15f0:	33 27       	eor	r19, r19
    15f2:	a0 0d       	add	r26, r0
    15f4:	61 1d       	adc	r22, r1
    15f6:	23 1f       	adc	r18, r19
    15f8:	84 9f       	mul	r24, r20
    15fa:	60 0d       	add	r22, r0
    15fc:	21 1d       	adc	r18, r1
    15fe:	82 2f       	mov	r24, r18
    1600:	76 2f       	mov	r23, r22
    1602:	6a 2f       	mov	r22, r26
    1604:	11 24       	eor	r1, r1
    1606:	9f 57       	subi	r25, 0x7F	; 127
    1608:	50 40       	sbci	r21, 0x00	; 0
    160a:	9a f0       	brmi	.+38     	; 0x1632 <__mulsf3_pse+0x88>
    160c:	f1 f0       	breq	.+60     	; 0x164a <__mulsf3_pse+0xa0>
    160e:	88 23       	and	r24, r24
    1610:	4a f0       	brmi	.+18     	; 0x1624 <__mulsf3_pse+0x7a>
    1612:	ee 0f       	add	r30, r30
    1614:	ff 1f       	adc	r31, r31
    1616:	bb 1f       	adc	r27, r27
    1618:	66 1f       	adc	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	88 1f       	adc	r24, r24
    161e:	91 50       	subi	r25, 0x01	; 1
    1620:	50 40       	sbci	r21, 0x00	; 0
    1622:	a9 f7       	brne	.-22     	; 0x160e <__mulsf3_pse+0x64>
    1624:	9e 3f       	cpi	r25, 0xFE	; 254
    1626:	51 05       	cpc	r21, r1
    1628:	80 f0       	brcs	.+32     	; 0x164a <__mulsf3_pse+0xa0>
    162a:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__fp_inf>
    162e:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__fp_szero>
    1632:	5f 3f       	cpi	r21, 0xFF	; 255
    1634:	e4 f3       	brlt	.-8      	; 0x162e <__mulsf3_pse+0x84>
    1636:	98 3e       	cpi	r25, 0xE8	; 232
    1638:	d4 f3       	brlt	.-12     	; 0x162e <__mulsf3_pse+0x84>
    163a:	86 95       	lsr	r24
    163c:	77 95       	ror	r23
    163e:	67 95       	ror	r22
    1640:	b7 95       	ror	r27
    1642:	f7 95       	ror	r31
    1644:	e7 95       	ror	r30
    1646:	9f 5f       	subi	r25, 0xFF	; 255
    1648:	c1 f7       	brne	.-16     	; 0x163a <__mulsf3_pse+0x90>
    164a:	fe 2b       	or	r31, r30
    164c:	88 0f       	add	r24, r24
    164e:	91 1d       	adc	r25, r1
    1650:	96 95       	lsr	r25
    1652:	87 95       	ror	r24
    1654:	97 f9       	bld	r25, 7
    1656:	08 95       	ret

00001658 <__tablejump2__>:
    1658:	ee 0f       	add	r30, r30
    165a:	ff 1f       	adc	r31, r31
    165c:	05 90       	lpm	r0, Z+
    165e:	f4 91       	lpm	r31, Z
    1660:	e0 2d       	mov	r30, r0
    1662:	09 94       	ijmp

00001664 <printf>:
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e8 e3       	ldi	r30, 0x38	; 56
    166a:	fb e0       	ldi	r31, 0x0B	; 11
    166c:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__prologue_saves__+0x20>
    1670:	ae 01       	movw	r20, r28
    1672:	4b 5f       	subi	r20, 0xFB	; 251
    1674:	5f 4f       	sbci	r21, 0xFF	; 255
    1676:	fa 01       	movw	r30, r20
    1678:	61 91       	ld	r22, Z+
    167a:	71 91       	ld	r23, Z+
    167c:	af 01       	movw	r20, r30
    167e:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <__iob+0x2>
    1682:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <__iob+0x3>
    1686:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <vfprintf>
    168a:	e2 e0       	ldi	r30, 0x02	; 2
    168c:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__epilogue_restores__+0x20>

00001690 <putchar>:
    1690:	60 91 9c 06 	lds	r22, 0x069C	; 0x80069c <__iob+0x2>
    1694:	70 91 9d 06 	lds	r23, 0x069D	; 0x80069d <__iob+0x3>
    1698:	0e 94 76 0d 	call	0x1aec	; 0x1aec <fputc>
    169c:	08 95       	ret

0000169e <puts>:
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <__iob+0x2>
    16aa:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <__iob+0x3>
    16ae:	23 81       	ldd	r18, Z+3	; 0x03
    16b0:	21 ff       	sbrs	r18, 1
    16b2:	1b c0       	rjmp	.+54     	; 0x16ea <puts+0x4c>
    16b4:	8c 01       	movw	r16, r24
    16b6:	d0 e0       	ldi	r29, 0x00	; 0
    16b8:	c0 e0       	ldi	r28, 0x00	; 0
    16ba:	f8 01       	movw	r30, r16
    16bc:	81 91       	ld	r24, Z+
    16be:	8f 01       	movw	r16, r30
    16c0:	60 91 9c 06 	lds	r22, 0x069C	; 0x80069c <__iob+0x2>
    16c4:	70 91 9d 06 	lds	r23, 0x069D	; 0x80069d <__iob+0x3>
    16c8:	db 01       	movw	r26, r22
    16ca:	18 96       	adiw	r26, 0x08	; 8
    16cc:	ed 91       	ld	r30, X+
    16ce:	fc 91       	ld	r31, X
    16d0:	19 97       	sbiw	r26, 0x09	; 9
    16d2:	88 23       	and	r24, r24
    16d4:	31 f0       	breq	.+12     	; 0x16e2 <puts+0x44>
    16d6:	09 95       	icall
    16d8:	89 2b       	or	r24, r25
    16da:	79 f3       	breq	.-34     	; 0x16ba <puts+0x1c>
    16dc:	df ef       	ldi	r29, 0xFF	; 255
    16de:	cf ef       	ldi	r28, 0xFF	; 255
    16e0:	ec cf       	rjmp	.-40     	; 0x16ba <puts+0x1c>
    16e2:	8a e0       	ldi	r24, 0x0A	; 10
    16e4:	09 95       	icall
    16e6:	89 2b       	or	r24, r25
    16e8:	19 f0       	breq	.+6      	; 0x16f0 <puts+0x52>
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	9f ef       	ldi	r25, 0xFF	; 255
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <puts+0x56>
    16f0:	8d 2f       	mov	r24, r29
    16f2:	9c 2f       	mov	r25, r28
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	08 95       	ret

000016fe <vfprintf>:
    16fe:	ab e0       	ldi	r26, 0x0B	; 11
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e5 e8       	ldi	r30, 0x85	; 133
    1704:	fb e0       	ldi	r31, 0x0B	; 11
    1706:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__prologue_saves__>
    170a:	6c 01       	movw	r12, r24
    170c:	7b 01       	movw	r14, r22
    170e:	8a 01       	movw	r16, r20
    1710:	fc 01       	movw	r30, r24
    1712:	17 82       	std	Z+7, r1	; 0x07
    1714:	16 82       	std	Z+6, r1	; 0x06
    1716:	83 81       	ldd	r24, Z+3	; 0x03
    1718:	81 ff       	sbrs	r24, 1
    171a:	cc c1       	rjmp	.+920    	; 0x1ab4 <vfprintf+0x3b6>
    171c:	ce 01       	movw	r24, r28
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	3c 01       	movw	r6, r24
    1722:	f6 01       	movw	r30, r12
    1724:	93 81       	ldd	r25, Z+3	; 0x03
    1726:	f7 01       	movw	r30, r14
    1728:	93 fd       	sbrc	r25, 3
    172a:	85 91       	lpm	r24, Z+
    172c:	93 ff       	sbrs	r25, 3
    172e:	81 91       	ld	r24, Z+
    1730:	7f 01       	movw	r14, r30
    1732:	88 23       	and	r24, r24
    1734:	09 f4       	brne	.+2      	; 0x1738 <vfprintf+0x3a>
    1736:	ba c1       	rjmp	.+884    	; 0x1aac <vfprintf+0x3ae>
    1738:	85 32       	cpi	r24, 0x25	; 37
    173a:	39 f4       	brne	.+14     	; 0x174a <vfprintf+0x4c>
    173c:	93 fd       	sbrc	r25, 3
    173e:	85 91       	lpm	r24, Z+
    1740:	93 ff       	sbrs	r25, 3
    1742:	81 91       	ld	r24, Z+
    1744:	7f 01       	movw	r14, r30
    1746:	85 32       	cpi	r24, 0x25	; 37
    1748:	29 f4       	brne	.+10     	; 0x1754 <vfprintf+0x56>
    174a:	b6 01       	movw	r22, r12
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <fputc>
    1752:	e7 cf       	rjmp	.-50     	; 0x1722 <vfprintf+0x24>
    1754:	91 2c       	mov	r9, r1
    1756:	21 2c       	mov	r2, r1
    1758:	31 2c       	mov	r3, r1
    175a:	ff e1       	ldi	r31, 0x1F	; 31
    175c:	f3 15       	cp	r31, r3
    175e:	d8 f0       	brcs	.+54     	; 0x1796 <vfprintf+0x98>
    1760:	8b 32       	cpi	r24, 0x2B	; 43
    1762:	79 f0       	breq	.+30     	; 0x1782 <vfprintf+0x84>
    1764:	38 f4       	brcc	.+14     	; 0x1774 <vfprintf+0x76>
    1766:	80 32       	cpi	r24, 0x20	; 32
    1768:	79 f0       	breq	.+30     	; 0x1788 <vfprintf+0x8a>
    176a:	83 32       	cpi	r24, 0x23	; 35
    176c:	a1 f4       	brne	.+40     	; 0x1796 <vfprintf+0x98>
    176e:	23 2d       	mov	r18, r3
    1770:	20 61       	ori	r18, 0x10	; 16
    1772:	1d c0       	rjmp	.+58     	; 0x17ae <vfprintf+0xb0>
    1774:	8d 32       	cpi	r24, 0x2D	; 45
    1776:	61 f0       	breq	.+24     	; 0x1790 <vfprintf+0x92>
    1778:	80 33       	cpi	r24, 0x30	; 48
    177a:	69 f4       	brne	.+26     	; 0x1796 <vfprintf+0x98>
    177c:	23 2d       	mov	r18, r3
    177e:	21 60       	ori	r18, 0x01	; 1
    1780:	16 c0       	rjmp	.+44     	; 0x17ae <vfprintf+0xb0>
    1782:	83 2d       	mov	r24, r3
    1784:	82 60       	ori	r24, 0x02	; 2
    1786:	38 2e       	mov	r3, r24
    1788:	e3 2d       	mov	r30, r3
    178a:	e4 60       	ori	r30, 0x04	; 4
    178c:	3e 2e       	mov	r3, r30
    178e:	2a c0       	rjmp	.+84     	; 0x17e4 <vfprintf+0xe6>
    1790:	f3 2d       	mov	r31, r3
    1792:	f8 60       	ori	r31, 0x08	; 8
    1794:	1d c0       	rjmp	.+58     	; 0x17d0 <vfprintf+0xd2>
    1796:	37 fc       	sbrc	r3, 7
    1798:	2d c0       	rjmp	.+90     	; 0x17f4 <vfprintf+0xf6>
    179a:	20 ed       	ldi	r18, 0xD0	; 208
    179c:	28 0f       	add	r18, r24
    179e:	2a 30       	cpi	r18, 0x0A	; 10
    17a0:	40 f0       	brcs	.+16     	; 0x17b2 <vfprintf+0xb4>
    17a2:	8e 32       	cpi	r24, 0x2E	; 46
    17a4:	b9 f4       	brne	.+46     	; 0x17d4 <vfprintf+0xd6>
    17a6:	36 fc       	sbrc	r3, 6
    17a8:	81 c1       	rjmp	.+770    	; 0x1aac <vfprintf+0x3ae>
    17aa:	23 2d       	mov	r18, r3
    17ac:	20 64       	ori	r18, 0x40	; 64
    17ae:	32 2e       	mov	r3, r18
    17b0:	19 c0       	rjmp	.+50     	; 0x17e4 <vfprintf+0xe6>
    17b2:	36 fe       	sbrs	r3, 6
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <vfprintf+0xc4>
    17b6:	8a e0       	ldi	r24, 0x0A	; 10
    17b8:	98 9e       	mul	r9, r24
    17ba:	20 0d       	add	r18, r0
    17bc:	11 24       	eor	r1, r1
    17be:	92 2e       	mov	r9, r18
    17c0:	11 c0       	rjmp	.+34     	; 0x17e4 <vfprintf+0xe6>
    17c2:	ea e0       	ldi	r30, 0x0A	; 10
    17c4:	2e 9e       	mul	r2, r30
    17c6:	20 0d       	add	r18, r0
    17c8:	11 24       	eor	r1, r1
    17ca:	22 2e       	mov	r2, r18
    17cc:	f3 2d       	mov	r31, r3
    17ce:	f0 62       	ori	r31, 0x20	; 32
    17d0:	3f 2e       	mov	r3, r31
    17d2:	08 c0       	rjmp	.+16     	; 0x17e4 <vfprintf+0xe6>
    17d4:	8c 36       	cpi	r24, 0x6C	; 108
    17d6:	21 f4       	brne	.+8      	; 0x17e0 <vfprintf+0xe2>
    17d8:	83 2d       	mov	r24, r3
    17da:	80 68       	ori	r24, 0x80	; 128
    17dc:	38 2e       	mov	r3, r24
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <vfprintf+0xe6>
    17e0:	88 36       	cpi	r24, 0x68	; 104
    17e2:	41 f4       	brne	.+16     	; 0x17f4 <vfprintf+0xf6>
    17e4:	f7 01       	movw	r30, r14
    17e6:	93 fd       	sbrc	r25, 3
    17e8:	85 91       	lpm	r24, Z+
    17ea:	93 ff       	sbrs	r25, 3
    17ec:	81 91       	ld	r24, Z+
    17ee:	7f 01       	movw	r14, r30
    17f0:	81 11       	cpse	r24, r1
    17f2:	b3 cf       	rjmp	.-154    	; 0x175a <vfprintf+0x5c>
    17f4:	98 2f       	mov	r25, r24
    17f6:	9f 7d       	andi	r25, 0xDF	; 223
    17f8:	95 54       	subi	r25, 0x45	; 69
    17fa:	93 30       	cpi	r25, 0x03	; 3
    17fc:	28 f4       	brcc	.+10     	; 0x1808 <vfprintf+0x10a>
    17fe:	0c 5f       	subi	r16, 0xFC	; 252
    1800:	1f 4f       	sbci	r17, 0xFF	; 255
    1802:	9f e3       	ldi	r25, 0x3F	; 63
    1804:	99 83       	std	Y+1, r25	; 0x01
    1806:	0d c0       	rjmp	.+26     	; 0x1822 <vfprintf+0x124>
    1808:	83 36       	cpi	r24, 0x63	; 99
    180a:	31 f0       	breq	.+12     	; 0x1818 <vfprintf+0x11a>
    180c:	83 37       	cpi	r24, 0x73	; 115
    180e:	71 f0       	breq	.+28     	; 0x182c <vfprintf+0x12e>
    1810:	83 35       	cpi	r24, 0x53	; 83
    1812:	09 f0       	breq	.+2      	; 0x1816 <vfprintf+0x118>
    1814:	59 c0       	rjmp	.+178    	; 0x18c8 <vfprintf+0x1ca>
    1816:	21 c0       	rjmp	.+66     	; 0x185a <vfprintf+0x15c>
    1818:	f8 01       	movw	r30, r16
    181a:	80 81       	ld	r24, Z
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	0e 5f       	subi	r16, 0xFE	; 254
    1820:	1f 4f       	sbci	r17, 0xFF	; 255
    1822:	88 24       	eor	r8, r8
    1824:	83 94       	inc	r8
    1826:	91 2c       	mov	r9, r1
    1828:	53 01       	movw	r10, r6
    182a:	13 c0       	rjmp	.+38     	; 0x1852 <vfprintf+0x154>
    182c:	28 01       	movw	r4, r16
    182e:	f2 e0       	ldi	r31, 0x02	; 2
    1830:	4f 0e       	add	r4, r31
    1832:	51 1c       	adc	r5, r1
    1834:	f8 01       	movw	r30, r16
    1836:	a0 80       	ld	r10, Z
    1838:	b1 80       	ldd	r11, Z+1	; 0x01
    183a:	36 fe       	sbrs	r3, 6
    183c:	03 c0       	rjmp	.+6      	; 0x1844 <vfprintf+0x146>
    183e:	69 2d       	mov	r22, r9
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <vfprintf+0x14a>
    1844:	6f ef       	ldi	r22, 0xFF	; 255
    1846:	7f ef       	ldi	r23, 0xFF	; 255
    1848:	c5 01       	movw	r24, r10
    184a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <strnlen>
    184e:	4c 01       	movw	r8, r24
    1850:	82 01       	movw	r16, r4
    1852:	f3 2d       	mov	r31, r3
    1854:	ff 77       	andi	r31, 0x7F	; 127
    1856:	3f 2e       	mov	r3, r31
    1858:	16 c0       	rjmp	.+44     	; 0x1886 <vfprintf+0x188>
    185a:	28 01       	movw	r4, r16
    185c:	22 e0       	ldi	r18, 0x02	; 2
    185e:	42 0e       	add	r4, r18
    1860:	51 1c       	adc	r5, r1
    1862:	f8 01       	movw	r30, r16
    1864:	a0 80       	ld	r10, Z
    1866:	b1 80       	ldd	r11, Z+1	; 0x01
    1868:	36 fe       	sbrs	r3, 6
    186a:	03 c0       	rjmp	.+6      	; 0x1872 <vfprintf+0x174>
    186c:	69 2d       	mov	r22, r9
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <vfprintf+0x178>
    1872:	6f ef       	ldi	r22, 0xFF	; 255
    1874:	7f ef       	ldi	r23, 0xFF	; 255
    1876:	c5 01       	movw	r24, r10
    1878:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <strnlen_P>
    187c:	4c 01       	movw	r8, r24
    187e:	f3 2d       	mov	r31, r3
    1880:	f0 68       	ori	r31, 0x80	; 128
    1882:	3f 2e       	mov	r3, r31
    1884:	82 01       	movw	r16, r4
    1886:	33 fc       	sbrc	r3, 3
    1888:	1b c0       	rjmp	.+54     	; 0x18c0 <vfprintf+0x1c2>
    188a:	82 2d       	mov	r24, r2
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	88 16       	cp	r8, r24
    1890:	99 06       	cpc	r9, r25
    1892:	b0 f4       	brcc	.+44     	; 0x18c0 <vfprintf+0x1c2>
    1894:	b6 01       	movw	r22, r12
    1896:	80 e2       	ldi	r24, 0x20	; 32
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <fputc>
    189e:	2a 94       	dec	r2
    18a0:	f4 cf       	rjmp	.-24     	; 0x188a <vfprintf+0x18c>
    18a2:	f5 01       	movw	r30, r10
    18a4:	37 fc       	sbrc	r3, 7
    18a6:	85 91       	lpm	r24, Z+
    18a8:	37 fe       	sbrs	r3, 7
    18aa:	81 91       	ld	r24, Z+
    18ac:	5f 01       	movw	r10, r30
    18ae:	b6 01       	movw	r22, r12
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 76 0d 	call	0x1aec	; 0x1aec <fputc>
    18b6:	21 10       	cpse	r2, r1
    18b8:	2a 94       	dec	r2
    18ba:	21 e0       	ldi	r18, 0x01	; 1
    18bc:	82 1a       	sub	r8, r18
    18be:	91 08       	sbc	r9, r1
    18c0:	81 14       	cp	r8, r1
    18c2:	91 04       	cpc	r9, r1
    18c4:	71 f7       	brne	.-36     	; 0x18a2 <vfprintf+0x1a4>
    18c6:	e8 c0       	rjmp	.+464    	; 0x1a98 <vfprintf+0x39a>
    18c8:	84 36       	cpi	r24, 0x64	; 100
    18ca:	11 f0       	breq	.+4      	; 0x18d0 <vfprintf+0x1d2>
    18cc:	89 36       	cpi	r24, 0x69	; 105
    18ce:	41 f5       	brne	.+80     	; 0x1920 <vfprintf+0x222>
    18d0:	f8 01       	movw	r30, r16
    18d2:	37 fe       	sbrs	r3, 7
    18d4:	07 c0       	rjmp	.+14     	; 0x18e4 <vfprintf+0x1e6>
    18d6:	60 81       	ld	r22, Z
    18d8:	71 81       	ldd	r23, Z+1	; 0x01
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	0c 5f       	subi	r16, 0xFC	; 252
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	08 c0       	rjmp	.+16     	; 0x18f4 <vfprintf+0x1f6>
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	07 2e       	mov	r0, r23
    18ea:	00 0c       	add	r0, r0
    18ec:	88 0b       	sbc	r24, r24
    18ee:	99 0b       	sbc	r25, r25
    18f0:	0e 5f       	subi	r16, 0xFE	; 254
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	f3 2d       	mov	r31, r3
    18f6:	ff 76       	andi	r31, 0x6F	; 111
    18f8:	3f 2e       	mov	r3, r31
    18fa:	97 ff       	sbrs	r25, 7
    18fc:	09 c0       	rjmp	.+18     	; 0x1910 <vfprintf+0x212>
    18fe:	90 95       	com	r25
    1900:	80 95       	com	r24
    1902:	70 95       	com	r23
    1904:	61 95       	neg	r22
    1906:	7f 4f       	sbci	r23, 0xFF	; 255
    1908:	8f 4f       	sbci	r24, 0xFF	; 255
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	f0 68       	ori	r31, 0x80	; 128
    190e:	3f 2e       	mov	r3, r31
    1910:	2a e0       	ldi	r18, 0x0A	; 10
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	a3 01       	movw	r20, r6
    1916:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__ultoa_invert>
    191a:	88 2e       	mov	r8, r24
    191c:	86 18       	sub	r8, r6
    191e:	45 c0       	rjmp	.+138    	; 0x19aa <vfprintf+0x2ac>
    1920:	85 37       	cpi	r24, 0x75	; 117
    1922:	31 f4       	brne	.+12     	; 0x1930 <vfprintf+0x232>
    1924:	23 2d       	mov	r18, r3
    1926:	2f 7e       	andi	r18, 0xEF	; 239
    1928:	b2 2e       	mov	r11, r18
    192a:	2a e0       	ldi	r18, 0x0A	; 10
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	25 c0       	rjmp	.+74     	; 0x197a <vfprintf+0x27c>
    1930:	93 2d       	mov	r25, r3
    1932:	99 7f       	andi	r25, 0xF9	; 249
    1934:	b9 2e       	mov	r11, r25
    1936:	8f 36       	cpi	r24, 0x6F	; 111
    1938:	c1 f0       	breq	.+48     	; 0x196a <vfprintf+0x26c>
    193a:	18 f4       	brcc	.+6      	; 0x1942 <vfprintf+0x244>
    193c:	88 35       	cpi	r24, 0x58	; 88
    193e:	79 f0       	breq	.+30     	; 0x195e <vfprintf+0x260>
    1940:	b5 c0       	rjmp	.+362    	; 0x1aac <vfprintf+0x3ae>
    1942:	80 37       	cpi	r24, 0x70	; 112
    1944:	19 f0       	breq	.+6      	; 0x194c <vfprintf+0x24e>
    1946:	88 37       	cpi	r24, 0x78	; 120
    1948:	21 f0       	breq	.+8      	; 0x1952 <vfprintf+0x254>
    194a:	b0 c0       	rjmp	.+352    	; 0x1aac <vfprintf+0x3ae>
    194c:	e9 2f       	mov	r30, r25
    194e:	e0 61       	ori	r30, 0x10	; 16
    1950:	be 2e       	mov	r11, r30
    1952:	b4 fe       	sbrs	r11, 4
    1954:	0d c0       	rjmp	.+26     	; 0x1970 <vfprintf+0x272>
    1956:	fb 2d       	mov	r31, r11
    1958:	f4 60       	ori	r31, 0x04	; 4
    195a:	bf 2e       	mov	r11, r31
    195c:	09 c0       	rjmp	.+18     	; 0x1970 <vfprintf+0x272>
    195e:	34 fe       	sbrs	r3, 4
    1960:	0a c0       	rjmp	.+20     	; 0x1976 <vfprintf+0x278>
    1962:	29 2f       	mov	r18, r25
    1964:	26 60       	ori	r18, 0x06	; 6
    1966:	b2 2e       	mov	r11, r18
    1968:	06 c0       	rjmp	.+12     	; 0x1976 <vfprintf+0x278>
    196a:	28 e0       	ldi	r18, 0x08	; 8
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	05 c0       	rjmp	.+10     	; 0x197a <vfprintf+0x27c>
    1970:	20 e1       	ldi	r18, 0x10	; 16
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	02 c0       	rjmp	.+4      	; 0x197a <vfprintf+0x27c>
    1976:	20 e1       	ldi	r18, 0x10	; 16
    1978:	32 e0       	ldi	r19, 0x02	; 2
    197a:	f8 01       	movw	r30, r16
    197c:	b7 fe       	sbrs	r11, 7
    197e:	07 c0       	rjmp	.+14     	; 0x198e <vfprintf+0x290>
    1980:	60 81       	ld	r22, Z
    1982:	71 81       	ldd	r23, Z+1	; 0x01
    1984:	82 81       	ldd	r24, Z+2	; 0x02
    1986:	93 81       	ldd	r25, Z+3	; 0x03
    1988:	0c 5f       	subi	r16, 0xFC	; 252
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	06 c0       	rjmp	.+12     	; 0x199a <vfprintf+0x29c>
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 5f       	subi	r16, 0xFE	; 254
    1998:	1f 4f       	sbci	r17, 0xFF	; 255
    199a:	a3 01       	movw	r20, r6
    199c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__ultoa_invert>
    19a0:	88 2e       	mov	r8, r24
    19a2:	86 18       	sub	r8, r6
    19a4:	fb 2d       	mov	r31, r11
    19a6:	ff 77       	andi	r31, 0x7F	; 127
    19a8:	3f 2e       	mov	r3, r31
    19aa:	36 fe       	sbrs	r3, 6
    19ac:	0d c0       	rjmp	.+26     	; 0x19c8 <vfprintf+0x2ca>
    19ae:	23 2d       	mov	r18, r3
    19b0:	2e 7f       	andi	r18, 0xFE	; 254
    19b2:	a2 2e       	mov	r10, r18
    19b4:	89 14       	cp	r8, r9
    19b6:	58 f4       	brcc	.+22     	; 0x19ce <vfprintf+0x2d0>
    19b8:	34 fe       	sbrs	r3, 4
    19ba:	0b c0       	rjmp	.+22     	; 0x19d2 <vfprintf+0x2d4>
    19bc:	32 fc       	sbrc	r3, 2
    19be:	09 c0       	rjmp	.+18     	; 0x19d2 <vfprintf+0x2d4>
    19c0:	83 2d       	mov	r24, r3
    19c2:	8e 7e       	andi	r24, 0xEE	; 238
    19c4:	a8 2e       	mov	r10, r24
    19c6:	05 c0       	rjmp	.+10     	; 0x19d2 <vfprintf+0x2d4>
    19c8:	b8 2c       	mov	r11, r8
    19ca:	a3 2c       	mov	r10, r3
    19cc:	03 c0       	rjmp	.+6      	; 0x19d4 <vfprintf+0x2d6>
    19ce:	b8 2c       	mov	r11, r8
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <vfprintf+0x2d6>
    19d2:	b9 2c       	mov	r11, r9
    19d4:	a4 fe       	sbrs	r10, 4
    19d6:	0f c0       	rjmp	.+30     	; 0x19f6 <vfprintf+0x2f8>
    19d8:	fe 01       	movw	r30, r28
    19da:	e8 0d       	add	r30, r8
    19dc:	f1 1d       	adc	r31, r1
    19de:	80 81       	ld	r24, Z
    19e0:	80 33       	cpi	r24, 0x30	; 48
    19e2:	21 f4       	brne	.+8      	; 0x19ec <vfprintf+0x2ee>
    19e4:	9a 2d       	mov	r25, r10
    19e6:	99 7e       	andi	r25, 0xE9	; 233
    19e8:	a9 2e       	mov	r10, r25
    19ea:	09 c0       	rjmp	.+18     	; 0x19fe <vfprintf+0x300>
    19ec:	a2 fe       	sbrs	r10, 2
    19ee:	06 c0       	rjmp	.+12     	; 0x19fc <vfprintf+0x2fe>
    19f0:	b3 94       	inc	r11
    19f2:	b3 94       	inc	r11
    19f4:	04 c0       	rjmp	.+8      	; 0x19fe <vfprintf+0x300>
    19f6:	8a 2d       	mov	r24, r10
    19f8:	86 78       	andi	r24, 0x86	; 134
    19fa:	09 f0       	breq	.+2      	; 0x19fe <vfprintf+0x300>
    19fc:	b3 94       	inc	r11
    19fe:	a3 fc       	sbrc	r10, 3
    1a00:	11 c0       	rjmp	.+34     	; 0x1a24 <vfprintf+0x326>
    1a02:	a0 fe       	sbrs	r10, 0
    1a04:	06 c0       	rjmp	.+12     	; 0x1a12 <vfprintf+0x314>
    1a06:	b2 14       	cp	r11, r2
    1a08:	88 f4       	brcc	.+34     	; 0x1a2c <vfprintf+0x32e>
    1a0a:	28 0c       	add	r2, r8
    1a0c:	92 2c       	mov	r9, r2
    1a0e:	9b 18       	sub	r9, r11
    1a10:	0e c0       	rjmp	.+28     	; 0x1a2e <vfprintf+0x330>
    1a12:	b2 14       	cp	r11, r2
    1a14:	60 f4       	brcc	.+24     	; 0x1a2e <vfprintf+0x330>
    1a16:	b6 01       	movw	r22, r12
    1a18:	80 e2       	ldi	r24, 0x20	; 32
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <fputc>
    1a20:	b3 94       	inc	r11
    1a22:	f7 cf       	rjmp	.-18     	; 0x1a12 <vfprintf+0x314>
    1a24:	b2 14       	cp	r11, r2
    1a26:	18 f4       	brcc	.+6      	; 0x1a2e <vfprintf+0x330>
    1a28:	2b 18       	sub	r2, r11
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <vfprintf+0x332>
    1a2c:	98 2c       	mov	r9, r8
    1a2e:	21 2c       	mov	r2, r1
    1a30:	a4 fe       	sbrs	r10, 4
    1a32:	10 c0       	rjmp	.+32     	; 0x1a54 <vfprintf+0x356>
    1a34:	b6 01       	movw	r22, r12
    1a36:	80 e3       	ldi	r24, 0x30	; 48
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <fputc>
    1a3e:	a2 fe       	sbrs	r10, 2
    1a40:	17 c0       	rjmp	.+46     	; 0x1a70 <vfprintf+0x372>
    1a42:	a1 fc       	sbrc	r10, 1
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <vfprintf+0x34e>
    1a46:	88 e7       	ldi	r24, 0x78	; 120
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <vfprintf+0x352>
    1a4c:	88 e5       	ldi	r24, 0x58	; 88
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	b6 01       	movw	r22, r12
    1a52:	0c c0       	rjmp	.+24     	; 0x1a6c <vfprintf+0x36e>
    1a54:	8a 2d       	mov	r24, r10
    1a56:	86 78       	andi	r24, 0x86	; 134
    1a58:	59 f0       	breq	.+22     	; 0x1a70 <vfprintf+0x372>
    1a5a:	a1 fe       	sbrs	r10, 1
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <vfprintf+0x364>
    1a5e:	8b e2       	ldi	r24, 0x2B	; 43
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <vfprintf+0x366>
    1a62:	80 e2       	ldi	r24, 0x20	; 32
    1a64:	a7 fc       	sbrc	r10, 7
    1a66:	8d e2       	ldi	r24, 0x2D	; 45
    1a68:	b6 01       	movw	r22, r12
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <fputc>
    1a70:	89 14       	cp	r8, r9
    1a72:	38 f4       	brcc	.+14     	; 0x1a82 <vfprintf+0x384>
    1a74:	b6 01       	movw	r22, r12
    1a76:	80 e3       	ldi	r24, 0x30	; 48
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <fputc>
    1a7e:	9a 94       	dec	r9
    1a80:	f7 cf       	rjmp	.-18     	; 0x1a70 <vfprintf+0x372>
    1a82:	8a 94       	dec	r8
    1a84:	f3 01       	movw	r30, r6
    1a86:	e8 0d       	add	r30, r8
    1a88:	f1 1d       	adc	r31, r1
    1a8a:	80 81       	ld	r24, Z
    1a8c:	b6 01       	movw	r22, r12
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 76 0d 	call	0x1aec	; 0x1aec <fputc>
    1a94:	81 10       	cpse	r8, r1
    1a96:	f5 cf       	rjmp	.-22     	; 0x1a82 <vfprintf+0x384>
    1a98:	22 20       	and	r2, r2
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <vfprintf+0x3a0>
    1a9c:	42 ce       	rjmp	.-892    	; 0x1722 <vfprintf+0x24>
    1a9e:	b6 01       	movw	r22, r12
    1aa0:	80 e2       	ldi	r24, 0x20	; 32
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 76 0d 	call	0x1aec	; 0x1aec <fputc>
    1aa8:	2a 94       	dec	r2
    1aaa:	f6 cf       	rjmp	.-20     	; 0x1a98 <vfprintf+0x39a>
    1aac:	f6 01       	movw	r30, r12
    1aae:	86 81       	ldd	r24, Z+6	; 0x06
    1ab0:	97 81       	ldd	r25, Z+7	; 0x07
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <vfprintf+0x3ba>
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
    1ab6:	9f ef       	ldi	r25, 0xFF	; 255
    1ab8:	2b 96       	adiw	r28, 0x0b	; 11
    1aba:	e2 e1       	ldi	r30, 0x12	; 18
    1abc:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__epilogue_restores__>

00001ac0 <strnlen_P>:
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	05 90       	lpm	r0, Z+
    1ac4:	61 50       	subi	r22, 0x01	; 1
    1ac6:	70 40       	sbci	r23, 0x00	; 0
    1ac8:	01 10       	cpse	r0, r1
    1aca:	d8 f7       	brcc	.-10     	; 0x1ac2 <strnlen_P+0x2>
    1acc:	80 95       	com	r24
    1ace:	90 95       	com	r25
    1ad0:	8e 0f       	add	r24, r30
    1ad2:	9f 1f       	adc	r25, r31
    1ad4:	08 95       	ret

00001ad6 <strnlen>:
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	61 50       	subi	r22, 0x01	; 1
    1ada:	70 40       	sbci	r23, 0x00	; 0
    1adc:	01 90       	ld	r0, Z+
    1ade:	01 10       	cpse	r0, r1
    1ae0:	d8 f7       	brcc	.-10     	; 0x1ad8 <strnlen+0x2>
    1ae2:	80 95       	com	r24
    1ae4:	90 95       	com	r25
    1ae6:	8e 0f       	add	r24, r30
    1ae8:	9f 1f       	adc	r25, r31
    1aea:	08 95       	ret

00001aec <fputc>:
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	fb 01       	movw	r30, r22
    1af6:	23 81       	ldd	r18, Z+3	; 0x03
    1af8:	21 fd       	sbrc	r18, 1
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <fputc+0x16>
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	9f ef       	ldi	r25, 0xFF	; 255
    1b00:	2c c0       	rjmp	.+88     	; 0x1b5a <fputc+0x6e>
    1b02:	22 ff       	sbrs	r18, 2
    1b04:	16 c0       	rjmp	.+44     	; 0x1b32 <fputc+0x46>
    1b06:	46 81       	ldd	r20, Z+6	; 0x06
    1b08:	57 81       	ldd	r21, Z+7	; 0x07
    1b0a:	24 81       	ldd	r18, Z+4	; 0x04
    1b0c:	35 81       	ldd	r19, Z+5	; 0x05
    1b0e:	42 17       	cp	r20, r18
    1b10:	53 07       	cpc	r21, r19
    1b12:	44 f4       	brge	.+16     	; 0x1b24 <fputc+0x38>
    1b14:	a0 81       	ld	r26, Z
    1b16:	b1 81       	ldd	r27, Z+1	; 0x01
    1b18:	9d 01       	movw	r18, r26
    1b1a:	2f 5f       	subi	r18, 0xFF	; 255
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	31 83       	std	Z+1, r19	; 0x01
    1b20:	20 83       	st	Z, r18
    1b22:	8c 93       	st	X, r24
    1b24:	26 81       	ldd	r18, Z+6	; 0x06
    1b26:	37 81       	ldd	r19, Z+7	; 0x07
    1b28:	2f 5f       	subi	r18, 0xFF	; 255
    1b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2c:	37 83       	std	Z+7, r19	; 0x07
    1b2e:	26 83       	std	Z+6, r18	; 0x06
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <fputc+0x6e>
    1b32:	8b 01       	movw	r16, r22
    1b34:	ec 01       	movw	r28, r24
    1b36:	fb 01       	movw	r30, r22
    1b38:	00 84       	ldd	r0, Z+8	; 0x08
    1b3a:	f1 85       	ldd	r31, Z+9	; 0x09
    1b3c:	e0 2d       	mov	r30, r0
    1b3e:	09 95       	icall
    1b40:	89 2b       	or	r24, r25
    1b42:	e1 f6       	brne	.-72     	; 0x1afc <fputc+0x10>
    1b44:	d8 01       	movw	r26, r16
    1b46:	16 96       	adiw	r26, 0x06	; 6
    1b48:	8d 91       	ld	r24, X+
    1b4a:	9c 91       	ld	r25, X
    1b4c:	17 97       	sbiw	r26, 0x07	; 7
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	17 96       	adiw	r26, 0x07	; 7
    1b52:	9c 93       	st	X, r25
    1b54:	8e 93       	st	-X, r24
    1b56:	16 97       	sbiw	r26, 0x06	; 6
    1b58:	ce 01       	movw	r24, r28
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	08 95       	ret

00001b64 <__ultoa_invert>:
    1b64:	fa 01       	movw	r30, r20
    1b66:	aa 27       	eor	r26, r26
    1b68:	28 30       	cpi	r18, 0x08	; 8
    1b6a:	51 f1       	breq	.+84     	; 0x1bc0 <__ultoa_invert+0x5c>
    1b6c:	20 31       	cpi	r18, 0x10	; 16
    1b6e:	81 f1       	breq	.+96     	; 0x1bd0 <__ultoa_invert+0x6c>
    1b70:	e8 94       	clt
    1b72:	6f 93       	push	r22
    1b74:	6e 7f       	andi	r22, 0xFE	; 254
    1b76:	6e 5f       	subi	r22, 0xFE	; 254
    1b78:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	af 4f       	sbci	r26, 0xFF	; 255
    1b80:	b1 e0       	ldi	r27, 0x01	; 1
    1b82:	3e d0       	rcall	.+124    	; 0x1c00 <__ultoa_invert+0x9c>
    1b84:	b4 e0       	ldi	r27, 0x04	; 4
    1b86:	3c d0       	rcall	.+120    	; 0x1c00 <__ultoa_invert+0x9c>
    1b88:	67 0f       	add	r22, r23
    1b8a:	78 1f       	adc	r23, r24
    1b8c:	89 1f       	adc	r24, r25
    1b8e:	9a 1f       	adc	r25, r26
    1b90:	a1 1d       	adc	r26, r1
    1b92:	68 0f       	add	r22, r24
    1b94:	79 1f       	adc	r23, r25
    1b96:	8a 1f       	adc	r24, r26
    1b98:	91 1d       	adc	r25, r1
    1b9a:	a1 1d       	adc	r26, r1
    1b9c:	6a 0f       	add	r22, r26
    1b9e:	71 1d       	adc	r23, r1
    1ba0:	81 1d       	adc	r24, r1
    1ba2:	91 1d       	adc	r25, r1
    1ba4:	a1 1d       	adc	r26, r1
    1ba6:	20 d0       	rcall	.+64     	; 0x1be8 <__ultoa_invert+0x84>
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <__ultoa_invert+0x48>
    1baa:	68 94       	set
    1bac:	3f 91       	pop	r19
    1bae:	2a e0       	ldi	r18, 0x0A	; 10
    1bb0:	26 9f       	mul	r18, r22
    1bb2:	11 24       	eor	r1, r1
    1bb4:	30 19       	sub	r19, r0
    1bb6:	30 5d       	subi	r19, 0xD0	; 208
    1bb8:	31 93       	st	Z+, r19
    1bba:	de f6       	brtc	.-74     	; 0x1b72 <__ultoa_invert+0xe>
    1bbc:	cf 01       	movw	r24, r30
    1bbe:	08 95       	ret
    1bc0:	46 2f       	mov	r20, r22
    1bc2:	47 70       	andi	r20, 0x07	; 7
    1bc4:	40 5d       	subi	r20, 0xD0	; 208
    1bc6:	41 93       	st	Z+, r20
    1bc8:	b3 e0       	ldi	r27, 0x03	; 3
    1bca:	0f d0       	rcall	.+30     	; 0x1bea <__ultoa_invert+0x86>
    1bcc:	c9 f7       	brne	.-14     	; 0x1bc0 <__ultoa_invert+0x5c>
    1bce:	f6 cf       	rjmp	.-20     	; 0x1bbc <__ultoa_invert+0x58>
    1bd0:	46 2f       	mov	r20, r22
    1bd2:	4f 70       	andi	r20, 0x0F	; 15
    1bd4:	40 5d       	subi	r20, 0xD0	; 208
    1bd6:	4a 33       	cpi	r20, 0x3A	; 58
    1bd8:	18 f0       	brcs	.+6      	; 0x1be0 <__ultoa_invert+0x7c>
    1bda:	49 5d       	subi	r20, 0xD9	; 217
    1bdc:	31 fd       	sbrc	r19, 1
    1bde:	40 52       	subi	r20, 0x20	; 32
    1be0:	41 93       	st	Z+, r20
    1be2:	02 d0       	rcall	.+4      	; 0x1be8 <__ultoa_invert+0x84>
    1be4:	a9 f7       	brne	.-22     	; 0x1bd0 <__ultoa_invert+0x6c>
    1be6:	ea cf       	rjmp	.-44     	; 0x1bbc <__ultoa_invert+0x58>
    1be8:	b4 e0       	ldi	r27, 0x04	; 4
    1bea:	a6 95       	lsr	r26
    1bec:	97 95       	ror	r25
    1bee:	87 95       	ror	r24
    1bf0:	77 95       	ror	r23
    1bf2:	67 95       	ror	r22
    1bf4:	ba 95       	dec	r27
    1bf6:	c9 f7       	brne	.-14     	; 0x1bea <__ultoa_invert+0x86>
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	61 05       	cpc	r22, r1
    1bfc:	71 05       	cpc	r23, r1
    1bfe:	08 95       	ret
    1c00:	9b 01       	movw	r18, r22
    1c02:	ac 01       	movw	r20, r24
    1c04:	0a 2e       	mov	r0, r26
    1c06:	06 94       	lsr	r0
    1c08:	57 95       	ror	r21
    1c0a:	47 95       	ror	r20
    1c0c:	37 95       	ror	r19
    1c0e:	27 95       	ror	r18
    1c10:	ba 95       	dec	r27
    1c12:	c9 f7       	brne	.-14     	; 0x1c06 <__ultoa_invert+0xa2>
    1c14:	62 0f       	add	r22, r18
    1c16:	73 1f       	adc	r23, r19
    1c18:	84 1f       	adc	r24, r20
    1c1a:	95 1f       	adc	r25, r21
    1c1c:	a0 1d       	adc	r26, r0
    1c1e:	08 95       	ret

00001c20 <__prologue_saves__>:
    1c20:	2f 92       	push	r2
    1c22:	3f 92       	push	r3
    1c24:	4f 92       	push	r4
    1c26:	5f 92       	push	r5
    1c28:	6f 92       	push	r6
    1c2a:	7f 92       	push	r7
    1c2c:	8f 92       	push	r8
    1c2e:	9f 92       	push	r9
    1c30:	af 92       	push	r10
    1c32:	bf 92       	push	r11
    1c34:	cf 92       	push	r12
    1c36:	df 92       	push	r13
    1c38:	ef 92       	push	r14
    1c3a:	ff 92       	push	r15
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	ca 1b       	sub	r28, r26
    1c4a:	db 0b       	sbc	r29, r27
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	09 94       	ijmp

00001c58 <__epilogue_restores__>:
    1c58:	2a 88       	ldd	r2, Y+18	; 0x12
    1c5a:	39 88       	ldd	r3, Y+17	; 0x11
    1c5c:	48 88       	ldd	r4, Y+16	; 0x10
    1c5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c60:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c62:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c64:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c66:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c68:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c6a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c6c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c6e:	df 80       	ldd	r13, Y+7	; 0x07
    1c70:	ee 80       	ldd	r14, Y+6	; 0x06
    1c72:	fd 80       	ldd	r15, Y+5	; 0x05
    1c74:	0c 81       	ldd	r16, Y+4	; 0x04
    1c76:	1b 81       	ldd	r17, Y+3	; 0x03
    1c78:	aa 81       	ldd	r26, Y+2	; 0x02
    1c7a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c7c:	ce 0f       	add	r28, r30
    1c7e:	d1 1d       	adc	r29, r1
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	ed 01       	movw	r28, r26
    1c8c:	08 95       	ret

00001c8e <_exit>:
    1c8e:	f8 94       	cli

00001c90 <__stop_program>:
    1c90:	ff cf       	rjmp	.-2      	; 0x1c90 <__stop_program>
